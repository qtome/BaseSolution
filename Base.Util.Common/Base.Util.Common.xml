<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Base.Util.Common</name>
    </assembly>
    <members>
        <member name="T:Base.Util.Common.BaseClass.Attributes.BaseCustomAttribute">
            <summary>
            自定义属性基类
            </summary>
        </member>
        <member name="P:Base.Util.Common.BaseClass.Attributes.BaseCustomAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.BaseCustomAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.BaseCustomAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:Base.Util.Common.BaseClass.Attributes.BaseServiceMessage">
            <summary>
            基础消息基类
            </summary>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.BaseServiceMessage.Success(System.String)">
            <summary>
            成功
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.BaseServiceMessage.Success(System.Object,System.String)">
            <summary>
            成功
            </summary>
            <param name="info">信息</param>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.BaseServiceMessage.Failed(System.Int32,System.String)">
            <summary>
            失败
            </summary>
            <param name="code">错误码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.BaseServiceMessage.Failed(System.Object,System.Int32,System.String)">
            <summary>
            失败
            </summary>
            <param name="result">数据</param>
            <param name="code">错误码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.BaseServiceMessage.Failed(Base.Util.Common.Models.WebApi.SystemErrorCode,System.String)">
            <summary>
            失败
            </summary>
            <param name="code">SystemErrorCode 系统错误码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.BaseServiceMessage.Failed(System.Object,Base.Util.Common.Models.WebApi.SystemErrorCode,System.String)">
            <summary>
            失败
            </summary>
            <param name="result">数据</param>
            <param name="code">SystemErrorCode 系统错误码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.BaseServiceMessage.Failed(Base.Util.Common.Models.WebApi.ServiceException)">
            <summary>
            失败
            </summary>
            <param name="exception">抛出的异常</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.BaseClass.Attributes.DataSourceAttribute">
            <summary>
            数据来源属性
            </summary>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.DataSourceAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dataSource">数据来源</param>
        </member>
        <member name="M:Base.Util.Common.BaseClass.Attributes.DataSourceAttribute.GetDataSource">
            <summary>
            获取数据来源
            </summary>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Enums.Common.DataSourceOption">
            <summary>
            数据来源枚举
            </summary>
        </member>
        <member name="F:Base.Util.Common.Enums.Common.DataSourceOption.未知">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Base.Util.Common.Enums.Common.DataSourceOption.微信小程序提交">
            <summary>
            微信小程序提交
            </summary>
        </member>
        <member name="F:Base.Util.Common.Enums.Common.DataSourceOption.PC提交">
            <summary>
            PC提交
            </summary>
        </member>
        <member name="F:Base.Util.Common.Enums.Common.DataSourceOption.PC导入">
            <summary>
            PC导入
            </summary>
        </member>
        <member name="F:Base.Util.Common.Enums.Common.DataSourceOption.第三方接入">
            <summary>
            第三方接入
            </summary>
        </member>
        <member name="T:Base.Util.Common.Extensions.Linq.LinqEnumerablExtension">
            <summary>
            LINQ动态排序扩展#
            </summary>
        </member>
        <member name="M:Base.Util.Common.Extensions.Linq.LinqEnumerablExtension.OrderByDynamic``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            动态排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="propertyName">需排序字段</param>
            <param name="isDesc">是否 true降序，false升序，不填，默认true降序</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Extensions.Linq.LinqEnumerablExtension.ThenByDynamic``1(System.Linq.IOrderedEnumerable{``0},System.String,System.Boolean)">
            <summary>
            动态排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="propertyName">需排序字段</param>
            <param name="isDesc">是否 true降序，false升序，不填，默认true降序</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Extensions.Linq.LinqExpressionExtension">
            <summary>
            LINQ表达式扩展#
            </summary>
        </member>
        <member name="M:Base.Util.Common.Extensions.Linq.LinqExpressionExtension.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Lambda表达式拼接
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="merge"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Extensions.Linq.LinqExpressionExtension.And``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            and扩展
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Extensions.Linq.LinqExpressionExtension.Or``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,System.Boolean}})">
            <summary>
            or扩展
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Extensions.Linq.ParameterRebinder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Base.Util.Common.Extensions.Linq.LinqQueryableExtension">
            <summary>
            LINQ动态排序扩展#
            </summary>
        </member>
        <member name="M:Base.Util.Common.Extensions.Linq.LinqQueryableExtension.OrderByDynamic``1(System.Linq.IQueryable{``0},System.String,System.Boolean)">
            <summary>
            动态排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="propertyName">需排序字段</param>
            <param name="isDesc">是否 true降序，false升序，不填，默认true降序</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Models.Common.BaseDropDownListItem">
            <summary>
            下拉框 选项类(基础类)
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseDropDownListItem.Value">
            <summary>
            下拉框选项  值
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseDropDownListItem.Text">
            <summary>
            下拉框选项  文本
            </summary>
        </member>
        <member name="T:Base.Util.Common.Models.Common.BaseGroupModel`2">
            <summary>
            分组类
            </summary>
            <typeparam name="TModel">主信息</typeparam>
            <typeparam name="TGroup">分组信息</typeparam>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseGroupModel`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseGroupModel`2.#ctor(`0,`1)">
            <summary>
            构造函数
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseGroupModel`2.Key">
            <summary>
            主信息
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseGroupModel`2.Value">
            <summary>
            副信息
            </summary>
        </member>
        <member name="T:Base.Util.Common.Models.Common.BaseMultDropDownListItemDto`1">
            <summary>
            多级下拉框 选项类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultDropDownListItemDto`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseMultDropDownListItemDto`1.Children">
            <summary>
            下级子数据
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultDropDownListItemDto`1.CreateModel(System.String,System.String,System.Collections.Generic.List{`0})">
            <summary>
            创建单例
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Models.Common.BaseMultiLevelCountDto">
            <summary>
            多级下拉框 统计类
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseMultiLevelCountDto.Count">
            <summary>
            统计值
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseMultiLevelCountDto.Children">
            <summary>
            下级子数据
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultiLevelCountDto.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultiLevelCountDto.CreateModel(System.String,System.String)">
            <summary>
            创建实例
            </summary>
            <param name="value"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultiLevelCountDto.CreateModel(System.String,System.String,System.Decimal)">
            <summary>
            创建实例
            </summary>
            <param name="value"></param>
            <param name="text"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultiLevelCountDto.CreateModel(System.String,System.String,System.Decimal,System.Collections.Generic.List{Base.Util.Common.Models.Common.BaseMultiLevelCountDto})">
            <summary>
            创建实例
            </summary>
            <param name="value"></param>
            <param name="text"></param>
            <param name="count"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Models.Common.BaseMultiLevelDropDownDto">
            <summary>
            多级下拉框 选项类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultiLevelDropDownDto.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseMultiLevelDropDownDto.Children">
            <summary>
            下级子数据
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultiLevelDropDownDto.CreateModel(System.String,System.String)">
            <summary>
            创建单例
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultiLevelDropDownDto.CreateModel(System.String,System.String,System.Collections.Generic.List{Base.Util.Common.Models.Common.BaseMultiLevelDropDownDto})">
            <summary>
            创建单例
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Models.Common.BaseMultiLevelOptionDto">
            <summary>
            多级复杂选项类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultiLevelOptionDto.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseMultiLevelOptionDto.Children">
            <summary>
            下级选项数据
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseMultiLevelOptionDto.CreateModel(System.String,System.String,System.Collections.Generic.List{Base.Util.Common.Models.Common.BaseMultiLevelOptionDto})">
            <summary>
            创建单例
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <param name="children"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Models.Common.BaseOptionItemDto">
            <summary>
            选项信息类（用来展示单选复选）
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseOptionItemDto.Value">
            <summary>
            选项框  值
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseOptionItemDto.Text">
            <summary>
            选项框  文本
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseOptionItemDto.MultiSelect">
            <summary>
            是否是多选
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseOptionItemDto.Required">
            <summary>
            是否是必选
            </summary>
        </member>
        <member name="T:Base.Util.Common.Models.Common.BaseStatisticsListItem">
            <summary>
            统计用基础信息类
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseStatisticsListItem.Value">
            <summary>
            统计后台值
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseStatisticsListItem.Text">
            <summary>
            统计描述
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseStatisticsListItem.Count">
            <summary>
            统计值
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.BaseStatisticsListItem.Type">
            <summary>
            统计类型
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.BaseStatisticsListItem.CreateBaseModel(System.String,System.String,System.Int32,System.String)">
            <summary>
            创建统计信息类
            </summary>
            <param name="value">后台值</param>
            <param name="text">描述</param>
            <param name="count">统计值</param>
            <param name="type">类别</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Models.Common.OperationModel`1">
            <summary>
            操作 结果信息类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel`1.#ctor(`0,System.Boolean,Base.Util.Common.Models.Common.Operation)">
            <summary>
            构造函数
            </summary>
            <param name="data">数据</param>
            <param name="result">操作结果</param>
            <param name="operation">操作类型</param>
        </member>
        <member name="P:Base.Util.Common.Models.Common.OperationModel`1.Data">
            <summary>
            新增成功的数据信息
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.OperationModel`1.IsSuccessful">
            <summary>
            操作 是否成功
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.OperationModel`1.Type">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel`1.Post(`0,System.Boolean)">
            <summary>
            返回 新增 操作结果模型
            </summary>
            <param name="data">数据</param>
            <param name="result">操作结果</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel`1.Put(`0,System.Boolean)">
            <summary>
            返回 全量更新 操作结果模型
            </summary>
            <param name="data">数据</param>
            <param name="result">操作结果</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel`1.Patch(`0,System.Boolean)">
            <summary>
            返回 部分更新 操作结果模型
            </summary>
            <param name="data">数据</param>
            <param name="result">操作结果</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel`1.Delete(System.Boolean)">
            <summary>
            返回 删除 操作结果模型
            </summary>
            <param name="result">操作结果</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel`1.Get(`0)">
            <summary>
            返回 查看 操作结果模型
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel`1.Search(`0)">
            <summary>
            返回 查询 操作结果模型
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="T:Base.Util.Common.Models.Common.OperationModel">
            <summary>
            操作 结果信息类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel.#ctor(System.Object,System.Boolean,Base.Util.Common.Models.Common.Operation)">
            <summary>
            构造函数
            </summary>
            <param name="data">数据</param>
            <param name="result">操作结果</param>
            <param name="operation">操作类型</param>
        </member>
        <member name="P:Base.Util.Common.Models.Common.OperationModel.Data">
            <summary>
            新增成功的数据信息
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.OperationModel.IsSuccessful">
            <summary>
            操作 是否成功
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.OperationModel.Type">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel.Post(System.Object,System.Boolean)">
            <summary>
            返回 新增 操作结果模型
            </summary>
            <param name="data">数据</param>
            <param name="result">操作结果</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel.Put(System.Object,System.Boolean)">
            <summary>
            返回 全量更新 操作结果模型
            </summary>
            <param name="data">数据</param>
            <param name="result">操作结果</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel.Patch(System.Object,System.Boolean)">
            <summary>
            返回 部分更新 操作结果模型
            </summary>
            <param name="data">数据</param>
            <param name="result">操作结果</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel.Delete(System.Boolean)">
            <summary>
            返回 删除 操作结果模型
            </summary>
            <param name="result">操作结果</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel.Get(System.Object)">
            <summary>
            返回 查看 操作结果模型
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.OperationModel.Search">
            <summary>
            返回 查询 操作结果模型
            </summary>
        </member>
        <member name="T:Base.Util.Common.Models.Common.Operation">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.Common.Operation.无动作">
            <summary>
            NULL
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.Common.Operation.新增">
            <summary>
            Post
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.Common.Operation.全量更新">
            <summary>
            Put
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.Common.Operation.部分更新">
            <summary>
            Patch
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.Common.Operation.删除">
            <summary>
            Delete
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.Common.Operation.查看">
            <summary>
            Get
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.Common.Operation.查询">
            <summary>
            Get
            </summary>
        </member>
        <member name="T:Base.Util.Common.Models.Common.PagingList`1">
            <summary>
            带有统计功能的List
            </summary>
            <typeparam name="T">可以实例化的类型</typeparam>
        </member>
        <member name="P:Base.Util.Common.Models.Common.PagingList`1.PageIndex">
            <summary>
            分页数
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.PagingList`1.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.PagingList`1.TotalPages">
            <summary>
            分页总数
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.PagingList`1.TotleCount">
            <summary>
            总数据
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.PagingList`1.HasPreviousPage">
            <summary>
            是否有上一页
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.PagingList`1.HasNextPage">
            <summary>
            是否有下一页
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.Common.PagingList`1.PageList">
            <summary>
            列表数据
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.PagingList`1.#ctor(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="items">分页数据</param>
            <param name="count">总量</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
        </member>
        <member name="M:Base.Util.Common.Models.Common.PagingList`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.Common.PagingList`1.Create(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            扩展方法
            </summary>
            <param name="source"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.Common.PagingList`1.Create(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            扩展方法
            </summary>
            <param name="source"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.Common.PagingList`1.Create(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            扩展方法
            </summary>
            <param name="source"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.Common.PagingList`1.Create(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            扩展方法
            </summary>
            <param name="source"></param>
            <param name="count"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Models.WebApi.HttpRequestMethodOption">
            <summary>
            请求方法枚举
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpRequestMethodOption.GET">
            <summary>
            查看
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpRequestMethodOption.POST">
            <summary>
            新增
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpRequestMethodOption.PUT">
            <summary>
            修改
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpRequestMethodOption.DELETE">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpRequestMethodOption.HEAD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpRequestMethodOption.OPTIONS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpRequestMethodOption.PATCH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpRequestMethodOption.MERGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpRequestMethodOption.COPY">
            <summary>
            
            </summary>
        </member>
        <member name="T:Base.Util.Common.Models.WebApi.HttpStateCode">
            <summary>
            自定义http状态错误
            对应System.Net.HttpStatusCode
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpStateCode.成功">
            <summary>
            2XX （请求成功）表示成功处理了请求的状态代码。
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpStateCode.多种选择">
            <summary>
            3XX （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpStateCode.错误请求">
            <summary>
            4XX （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理
            </summary>
        </member>
        <member name="F:Base.Util.Common.Models.WebApi.HttpStateCode.服务器内部错误">
            <summary>
            5XX（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。
            </summary>
        </member>
        <member name="T:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel">
            <summary>
            服务错误追踪类
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.TraceId">
            <summary>
            追踪Id
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.ReportDate">
            <summary>
            发生时间
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.ExceptionMessage">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.Stack">
            <summary>
            堆栈
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.TraceIdentifier">
            <summary>
            追踪Id
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.ActionArguments">
            <summary>
            Action参数集合
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.Headers">
            <summary>
            头信息
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.Query">
            <summary>
            查询参数集合
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.Body">
            <summary>
            体参数
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.Path">
            <summary>
            Api地址
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceErrorTraceModel.RouteValues">
            <summary>
            Api路由
            </summary>
        </member>
        <member name="T:Base.Util.Common.Models.WebApi.ServiceErrorTraceModelExtension">
            <summary>
            服务错误追踪类 扩展
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceErrorTraceModelExtension.GetViewModel(Base.Util.Common.Models.WebApi.ServiceErrorTraceModel)">
            <summary>
            获取前端错误码追踪信息
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Models.WebApi.ServiceException">
            <summary>
            API 异常
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceException.ServiceMessageModel">
            <summary>
            服务层响应实体
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceException.#ctor(Base.Util.Common.Models.WebApi.ServiceMessageModel)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceException.#ctor(Base.Util.Common.Models.WebApi.ServiceMessageModel,System.Exception)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceException.GetBaseException">
            <summary>
            获取最初异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceException.GetServiceException(System.Exception)">
            <summary>
            获取最初的服务异常
            </summary>
            <param name="ex">异常基类</param>
            <returns>ServiceException</returns>
        </member>
        <member name="T:Base.Util.Common.Models.WebApi.ServiceMessageModel`1">
            <summary>
            服务层响应实体
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceMessageModel`1.result">
            <summary>
            返回数据集合
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel`1.Success(System.String)">
            <summary>
            返回成功消息体
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel`1.Success(`0,System.String)">
            <summary>
            返回成功消息体
            </summary>
            <param name="result">数据</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel`1.Failure(System.Int32,System.String)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">状态码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel`1.Failure(System.Int32,System.String,`0)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">状态码</param>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel`1.Failure(Base.Util.Common.Models.WebApi.HttpStateCode,System.String)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">HttpStateCode 状态码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel`1.Failure(Base.Util.Common.Models.WebApi.HttpStateCode,System.String,`0)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">HttpStateCode 状态码</param>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel`1.Failure(Base.Util.Common.Models.WebApi.SystemErrorCode,System.String)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">SystemErrorCode 系统错误码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel`1.Failure(Base.Util.Common.Models.WebApi.SystemErrorCode,System.String,`0)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">SystemErrorCode 系统错误码</param>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel`1.Message(System.Int32,System.Boolean,System.String,`0)">
            <summary>
            返回服务消息体
            </summary>
            <param name="code">状态码（HttpStateCode 状态码 || SystemErrorCode 系统错误码）</param>
            <param name="success">失败/成功</param>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Models.WebApi.ServiceMessageModel">
            <summary>
            服务层响应实体
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceMessageModel.code">
            <summary>
            http状态码
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceMessageModel.success">
            <summary>
            操作是否成功
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceMessageModel.info">
            <summary>
            返回信息
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceMessageModel.result">
            <summary>
            返回数据集合
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceMessageModel.SystemCode">
            <summary>
            系统错误代码
            </summary>
        </member>
        <member name="P:Base.Util.Common.Models.WebApi.ServiceMessageModel.HttpCode">
            <summary>
            http状态码
            </summary>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.GetErrorCode">
            <summary>
            获取对应错误码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Success(System.String)">
            <summary>
            返回成功消息体
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Success(System.String,System.Object)">
            <summary>
            返回成功消息体
            </summary>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Failure(System.Int32,System.String)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">状态码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Failure(System.Int32,System.String,System.Object)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">状态码</param>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Failure(Base.Util.Common.Models.WebApi.HttpStateCode,System.String)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">HttpStateCode 状态码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Failure(Base.Util.Common.Models.WebApi.HttpStateCode,System.String,System.Object)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">HttpStateCode 状态码</param>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Failure(Base.Util.Common.Models.WebApi.SystemErrorCode,System.String)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">SystemErrorCode 系统错误码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Failure(Base.Util.Common.Models.WebApi.SystemErrorCode,System.String,System.Object)">
            <summary>
            返回失败消息体
            </summary>
            <param name="code">SystemErrorCode 系统错误码</param>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Message(System.Int32,System.Boolean,System.String,System.Object)">
            <summary>
            返回服务消息体
            </summary>
            <param name="code">状态码</param>
            <param name="success">失败/成功</param>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Message(Base.Util.Common.Models.WebApi.HttpStateCode,System.Boolean,System.String,System.Object)">
            <summary>
            返回服务消息体
            </summary>
            <param name="code">HttpStateCode HTTP状态码</param>
            <param name="success">失败/成功</param>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.Message(Base.Util.Common.Models.WebApi.SystemErrorCode,System.Boolean,System.String,System.Object)">
            <summary>
            返回服务消息体
            </summary>
            <param name="code">SystemErrorCode 系统错误码</param>
            <param name="success">失败/成功</param>
            <param name="info">信息</param>
            <param name="result">数据</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.GetErrorMessage(Base.Util.Common.Models.WebApi.SystemErrorCode,System.String)">
            <summary>
            获取SystemErrorCode 错误描述
            </summary>
            <param name="code">SystemErrorCode 系统错误码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Models.WebApi.ServiceMessageModel.GetErrorMessage(Base.Util.Common.Models.WebApi.HttpStateCode,System.String)">
            <summary>
            获取HttpStateCode 错误描述
            </summary>
            <param name="code">HttpStateCode 系统错误码</param>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Models.WebApi.SystemErrorCode">
            <summary>
            自定义系统错误代码
            10000-19999 编译级错误   提示
            20000-29999 操作级错误   一般
            30000-39999 功能级错误   严重
            40000-49999 系统级错误   致命
            </summary>
        </member>
        <member name="T:Base.Util.Common.Statics.ApiInfo.ApiGrouping">
            <summary>
            Api 版本分组
            </summary>
        </member>
        <member name="F:Base.Util.Common.Statics.ApiInfo.ApiGrouping.Version_0">
            <summary>
            测试版本
            </summary>
        </member>
        <member name="F:Base.Util.Common.Statics.ApiInfo.ApiGrouping.Version_P">
            <summary>
            内部交互 通用（不对外开放）
            </summary>
        </member>
        <member name="F:Base.Util.Common.Statics.ApiInfo.ApiGrouping.Version_1">
            <summary>
            1.0 版本
            </summary>
        </member>
        <member name="F:Base.Util.Common.Statics.ApiInfo.ApiGrouping.Version_2">
            <summary>
            2.0 版本
            </summary>
        </member>
        <member name="F:Base.Util.Common.Statics.ApiInfo.ApiGrouping.Version_3">
            <summary>
            3.0 版本
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.CollectionHelper.ArrayHelper">
            <summary>
            数组 辅助类#
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.ArrayHelper.Find``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            查找满足条件的单个元素
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="array">数组</param>
            <param name="condition">查找条件</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.ArrayHelper.FindAll``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            查找满足条件的元素集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.ArrayHelper.GetMax``2(``0[],System.Func{``0,``1})">
            <summary>
            最大值
            </summary>
            <typeparam name="T">代表的数组的类型 </typeparam>
            <typeparam name="Q">比较条件的返回值类型 </typeparam>
            <param name="array">要比较的数组</param>
            <param name="condition">要比较的方法</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.ArrayHelper.GetMin``2(``0[],System.Func{``0,``1})">
            <summary>
            最小值
            </summary>
            <typeparam name="T">代表的数组的类型 </typeparam>
            <typeparam name="Q">比较条件的返回值类型 </typeparam>
            <param name="array">要比较的数组</param>
            <param name="condition">要比较的方法</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper">
            <summary>
            DictionaryHelper 辅助类#
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.Put``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Put 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="dictionary">Put之前字典</param>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <returns>Put之后字典</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.PutArray``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Put 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="targetDictionary">Put之前字典</param>
            <param name="sourceDictionary">Key-Value</param>
            <returns>Put之后字典</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.Put``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Put 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="dictionary">Put之前字典</param>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="ignoreExists">是否忽视已存在项（不更改已存在项）</param>
            <returns>Put之后字典</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.Put``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Func{``1,System.Boolean})">
            <summary>
            Put 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="dictionary">Put之前字典</param>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="replaceExistsValueCondition">替换已存在项的条件函数</param>
            <returns>Put之后字典</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.PutArray``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1},System.Boolean)">
            <summary>
            Put 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="targetDictionary">Put之前字典</param>
            <param name="sourceDictionary">Key-Value</param>
            <param name="ignoreExists">是否忽视已存在项（不更改已存在项）</param>
            <returns>Put之后字典</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.PutArray``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Put 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="targetDictionary">Put之前字典</param>
            <param name="sourceDictionary">Key-Value</param>
            <param name="replaceExistsValueCondition">替换已存在项的条件函数</param>
            <returns>Put之后字典</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.Put``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Put 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="dictionary">Put之前字典</param>
            <param name="keyValuePair">Key-Value</param>
            <returns>Put之后字典</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.GetObjectWithoutException``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Put 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.RemoveObjectWithoutException``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            删除 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.PopWithoutException``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            获取之后删除(类似队列的Pop) 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.GetStructWithoutException``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Put 扩展字典方法 存在时更改,不存在时添加
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.ToDictionaryWithoutException``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            列表转换成字典(重复数据自动忽略)
            </summary>
            <typeparam name="TModel">Model的类型</typeparam>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="list">列表</param>
            <param name="keySelector">用于从每个元素中提取键的函数</param>
            <param name="elementSelector">用于从每个元素产生结果元素值的转换函数</param>
            <returns>Value</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.CollectionHelper.DictionaryHelper.ToStandardString``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            字典的字符串值
            </summary>
            <typeparam name="TKey">Key的类型</typeparam>
            <typeparam name="TValue">Value的类型</typeparam>
            <param name="dict">源列表</param>
            <returns>字符串值</returns>
        </member>
        <member name="T:Base.Util.Common.Utils.Converter.ConverterHelper">
            <summary>
            转换 辅助类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ToEntity``1(System.Data.DataTable)">
            <summary>
            将 DataTable 转换成 单个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ToEntities``1(System.Data.DataTable)">
            <summary>
            DataTable 转换成实体集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ToDataTable(System.Collections.IList)">
            <summary>
            将指定的集合转换成DataTable。
            </summary>
            <param name="list">将指定的集合。</param>
            <returns>返回转换后的DataTable。</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将指定的集合转换成DataTable。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ToDictionary(System.Data.DataTable)">
            <summary>
            Datatable转换为字典集合
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.IsNumeric(System.Object)">
            <summary>
            判断对象是否为Int32类型的数字
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.IsNumeric(System.String)">
            <summary>
            判断对象是否为Int32类型的数字
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.IsDouble(System.Object)">
            <summary>
            是否为Double类型
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.GetStrArray(System.String)">
            <summary>
            将字符串转换为数组
            </summary>
            <param name="str">字符串</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.GetArrayStr(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            将数组转换为字符串
            </summary>
            <param name="list">List</param>
            <param name="speater">分隔符</param>
            <returns>String</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.StrToBool(System.Object,System.Boolean)">
            <summary>
            object型转换为bool型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.StrToBool(System.String,System.Boolean)">
            <summary>
            string型转换为bool型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ObjToInt(System.Object,System.Int32)">
            <summary>
            将对象转换为Int32类型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.StrToInt(System.String,System.Int32)">
            <summary>
            将字符串转换为Int32类型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ObjToDecimal(System.Object,System.Decimal)">
            <summary>
            Object型转换为decimal型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的decimal类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.StrToDecimal(System.String,System.Decimal)">
            <summary>
            string型转换为decimal型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的decimal类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ObjToFloat(System.Object,System.Single)">
            <summary>
            Object型转换为float型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.StrToFloat(System.String,System.Single)">
            <summary>
            string型转换为float型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.StrToDateTime(System.String,System.DateTime)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.StrToDateTime(System.String)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ObjectToDateTime(System.Object)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="obj">要转换的对象</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ObjectToDateTime(System.Object,System.DateTime)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="obj">要转换的对象</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ObjectToStr(System.Object)">
            <summary>
            将对象转换为字符串
            </summary>
            <param name="obj">要转换的对象</param>
            <returns>转换后的string类型结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.StringToBytes(System.String,System.Text.Encoding)">
            <summary>
            使用指定字符集将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.BytesToString(System.Byte[],System.Text.Encoding)">
            <summary>
            使用指定字符集将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.BytesToInt32(System.Byte[])">
            <summary>
            将byte[]转换成int
            </summary>
            <param name="data">需要转换成整数的byte数组</param>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.ConvertBase(System.String,System.Int32,System.Int32)">
            <summary>
            实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数。
            </summary>
            <param name="value">要转换的值,即原值</param>
            <param name="from">原值的进制,只能是2,8,10,16四个值。</param>
            <param name="to">要转换到的目标进制，只能是2,8,10,16四个值。</param>
        </member>
        <member name="M:Base.Util.Common.Utils.Converter.ConverterHelper.IsBase64(System.String)">
            <summary>
            是否是Base64字符串
            </summary>
            <param name="eStr"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Utils.Cryption.AESHelper">
            <summary>
            AES 加密辅助类
            SymmetricAlgorithm  对称性
            对称性可逆加密
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.AESHelper.defaultKey">
            <summary>
            默认共享密钥
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.AESHelper.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="text">待加密文本</param>
            <returns>密文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.AESHelper.Encrypt(System.String,System.String)">
            <summary> 
            加密数据 
            </summary> 
            <param name="text">待加密文本</param> 
            <param name="shareKey">共享密钥</param> 
            <returns>密文</returns> 
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.AESHelper.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="text">加密的密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.AESHelper.Decrypt(System.String,System.String)">
            <summary> 
            解密数据 
            </summary> 
            <param name="text">加密的密文</param> 
            <param name="shareKey">共享密钥</param> 
            <returns></returns> 
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.AESHelper.VerifyCryption(System.String,System.String)">
            <summary>
            校验 DES加密 是否一致
            </summary>
            <param name="encode">加密后的密文</param>
            <param name="text">待验证明文</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.AESHelper.VerifyCryption(System.String,System.String,System.String)">
            <summary>
            校验 DES加密 是否一致
            </summary>
            <param name="encode">加密后的密文</param>
            <param name="text">待验证明文</param>
            <param name="shareKey">共享密钥</param>
            <returns>是否一致</returns>
        </member>
        <member name="T:Base.Util.Common.Utils.Cryption.Base64Helper">
            <summary>
            BASE64 加密辅助类#
            可逆加密
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.Base64Helper.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="source">待加密的明文</param>
            <param name="encode">加密采用的编码方式</param>
            <returns>密文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.Base64Helper.Encrypt(System.String)">
            <summary>
            Base64加密，采用utf8编码方式加密
            </summary>
            <param name="source">待加密的明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.Base64Helper.Decrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="result">待解密的密文</param>
            <param name="encode">解密采用的编码方式，注意和加密时采用的方式一致</param>
            <returns>明文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.Base64Helper.Decrypt(System.String)">
            <summary>
            Base64解密，采用utf8编码方式解密
            </summary>
            <param name="result">待解密的密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.Base64Helper.VerifyEncryption(System.String,System.String)">
            <summary>
            校验 加密后的密文 是否一致
            </summary>
            <param name="base64Source">加密后的Base64</param>
            <param name="source">待验证字串</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.Base64Helper.VerifyEncryption(System.String,System.String,System.Text.Encoding)">
            <summary>
            校验 加密后的密文 是否一致
            </summary>
            <param name="base64Source">加密后的Base64</param>
            <param name="source">待验证字串</param>
            <param name="encode">解密采用的编码方式，注意和加密时采用的方式一致</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.Base64Helper.VerifyDecryption(System.String,System.String)">
            <summary>
            校验 Base64解密结果 是否一致
            </summary>
            <param name="base64Source">加密后的Base64</param>
            <param name="source">待验证字串</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.Base64Helper.VerifyDecryption(System.String,System.String,System.Text.Encoding)">
            <summary>
            校验 Base64解密结果 是否一致
            </summary>
            <param name="base64Source">加密后的Base64</param>
            <param name="source">待验证字串</param>
            <param name="encode">解密采用的编码方式，注意和加密时采用的方式一致</param>
            <returns>是否一致</returns>
        </member>
        <member name="T:Base.Util.Common.Utils.Cryption.DESHelper">
            <summary>
            DES 加密辅助类#
            SymmetricAlgorithm  对称性
            对称性可逆加密
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.DESHelper.defaultKey">
            <summary>
            默认共享密钥
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="text">待加密文本</param>
            <returns>密文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.Encrypt(System.String,System.String)">
            <summary> 
            加密数据 
            </summary> 
            <param name="text">待加密文本</param> 
            <param name="shareKey">共享密钥</param> 
            <returns>密文</returns> 
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="text">加密的密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.Decrypt(System.String,System.String)">
            <summary> 
            解密数据 
            </summary> 
            <param name="text">加密的密文</param> 
            <param name="shareKey">共享密钥</param> 
            <returns></returns> 
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.VerifyCryption(System.String,System.String)">
            <summary>
            校验 DES加密 是否一致
            </summary>
            <param name="encode">加密后的密文</param>
            <param name="text">待验证明文</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.VerifyCryption(System.String,System.String,System.String)">
            <summary>
            校验 DES加密 是否一致
            </summary>
            <param name="encode">加密后的密文</param>
            <param name="text">待验证明文</param>
            <param name="shareKey">共享密钥</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.TripleEncrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="text">待加密文本</param>
            <returns>密文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.TripleEncrypt(System.String,System.String)">
            <summary> 
            加密数据 
            </summary> 
            <param name="text">待加密文本</param> 
            <param name="shareKey">共享密钥</param> 
            <returns>密文</returns> 
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.TripleDecrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="text">加密的密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.TripleDecrypt(System.String,System.String)">
            <summary> 
            解密数据 
            </summary> 
            <param name="text">加密的密文</param> 
            <param name="shareKey">共享密钥</param> 
            <returns></returns> 
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.VerifyTripleCryption(System.String,System.String)">
            <summary>
            校验 TripleDES加密 是否一致
            </summary>
            <param name="encode">加密后的密文</param>
            <param name="text">待验证明文</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.DESHelper.VerifyTripleCryption(System.String,System.String,System.String)">
            <summary>
            校验 TripleDES加密 是否一致
            </summary>
            <param name="encode">加密后的密文</param>
            <param name="text">待验证明文</param>
            <param name="shareKey">共享密钥</param>
            <returns>是否一致</returns>
        </member>
        <member name="T:Base.Util.Common.Utils.Cryption.EncodeingHelper">
            <summary>
            编码格式类型
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.EncodeingHelper.EncodingRegisterProvider(System.Text.EncodingProvider)">
            <summary>
            注册全局编码
            .NET Core 编码支持不全 需要注册
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.EncodeingHelper.GetEncoding(Base.Util.Common.Utils.Cryption.EncodeingOptions)">
            <summary>
            默认使用UTF8 编码方式
            </summary>
            <param name="options">编码方式类型</param>
            <returns>Encoding</returns>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.EncodeingOptions.UTF8">
            <summary>
            UTF8 编码方式
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.EncodeingOptions.Unicode">
            <summary>
            Unicode 编码方式
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.EncodeingOptions.GB2312">
            <summary>
            GB2312 编码方式 支持中文
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.EncodeingOptions.Default">
            <summary>
            Default 编码方式
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.EncodeingOptions.ASCII">
            <summary>
            ASCII 编码方式
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.EncodeingOptions.BigEndianUnicode">
            <summary>
            BigEndianUnicode 编码方式
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.EncodeingOptions.Latin1">
            <summary>
            Latin1 编码方式
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.EncodeingOptions.UTF7">
            <summary>
            UTF7 编码方式
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.EncodeingOptions.UTF32">
            <summary>
            UTF32 编码方式
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.Cryption.HashHelper">
            <summary>
            HASH 加密辅助类#
            MD5 SHA1 SHA256 SHA384 SHA512
            HashAlgorithm   哈希散列
            不可逆加密
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.GetHashAlgorithm(Base.Util.Common.Utils.Cryption.HashOption)">
            <summary>
            根据类型返回指定 哈希散列
            </summary>
            <param name="option">哈希散列类型</param>
            <returns>哈希散列</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.MD5Encrypt(System.String,Base.Util.Common.Utils.Cryption.MD5Length)">
            <summary>
            MD5加密,和动网上的16/32位MD5加密结果相同,
            使用的UTF8编码
            </summary>
            <param name="source">待加密字串</param>
            <param name="length">16或32值之一,其它则采用.net默认MD5加密算法</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifyMD5Cryption(System.String,System.String,Base.Util.Common.Utils.Cryption.MD5Length)">
            <summary>
            校验 MD5加密 是否一致
            </summary>
            <param name="md5Source">加密后的MD5</param>
            <param name="source">待验证字串</param>
            <param name="length">16或32值之一,其它则采用.net默认MD5加密算法</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.MD5AbstractFile(System.String)">
            <summary>
            获取文件的MD5摘要
            </summary>
            <param name="fileName">文件绝对路径</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.MD5AbstractFile(System.IO.Stream)">
            <summary>
            根据stream获取文件摘要
            </summary>
            <param name="stream">文件流</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifyMD5AbstractFile(System.String,System.String)">
            <summary>
            校验 文件摘要 是否一致
            </summary>
            <param name="md5Source">加密后的MD5</param>
            <param name="fileName">文件流</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifyMD5AbstractFile(System.String,System.IO.Stream)">
            <summary>
            校验 文件摘要 是否一致
            </summary>
            <param name="md5Source">加密后的MD5</param>
            <param name="stream">待验证字串</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.HMACMD5Encrypt(System.String,System.String)">
            <summary>
            MD5加密,和动网上的16/32位MD5加密结果相同,
            带key的DNA加密
            </summary>
            <param name="source">待加密字串</param>
            <param name="key">加密KEY</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifyHMACMD5Cryption(System.String,System.String,System.String)">
            <summary>
            校验 HMACMD5加密 是否一致
            </summary>
            <param name="md5Source">加密后的MD5</param>
            <param name="source">待验证字串</param>
            <param name="key">加密KEY</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.GetMD5(System.String)">
            <summary>
            生成MD5摘要文
            </summary>
            <param name="content">内容</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.SHA1Encrypt(System.String)">
            <summary>
            SHA1 方式 加密
            </summary>
            <param name="str">待加密文本</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifySHA1Cryption(System.String,System.String)">
            <summary>
            校验 SHA1加密 是否一致
            </summary>
            <param name="encryptText">加密后的文本</param>
            <param name="str">待验证字串</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.HMACSHA1Encrypt(System.String,System.String)">
            <summary>
            HMACSHA1 方式 加密
            </summary>
            <param name="str">待加密文本</param>
            <param name="key">加密密钥</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifyHMACSHA1Cryption(System.String,System.String,System.String)">
            <summary>
            校验 HMACSHA1加密 是否一致
            </summary>
            <param name="encryptText">加密后的文本</param>
            <param name="str">待验证字串</param>
            <param name="key">加密密钥</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.SHA256Encrypt(System.String)">
            <summary>
            SHA256 方式 加密
            </summary>
            <param name="str">待加密文本</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifySHA256Cryption(System.String,System.String)">
            <summary>
            校验 SHA256加密 是否一致
            </summary>
            <param name="encryptText">加密后的文本</param>
            <param name="str">待验证字串</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.HMACSHA256Encrypt(System.String,System.String)">
            <summary>
            HMACSHA256 方式 加密
            </summary>
            <param name="str">待加密文本</param>
            <param name="key">加密密钥</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifyHMACSHA256Cryption(System.String,System.String,System.String)">
            <summary>
            校验 HMACSHA256加密 是否一致
            </summary>
            <param name="encryptText">加密后的文本</param>
            <param name="str">待验证字串</param>
            <param name="key">加密密钥</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.SHA384Encrypt(System.String)">
            <summary>
            SHA384 方式 加密
            </summary>
            <param name="str">待加密文本</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifySHA384Cryption(System.String,System.String)">
            <summary>
            校验 SHA384加密 是否一致
            </summary>
            <param name="encryptText">加密后的文本</param>
            <param name="str">待验证字串</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.HMACSHA384Encrypt(System.String,System.String)">
            <summary>
            HMACSHA384 方式 加密
            </summary>
            <param name="str">待加密文本</param>
            <param name="key">加密密钥</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifyHMACSHA384Cryption(System.String,System.String,System.String)">
            <summary>
            校验 HMACSHA384加密 是否一致
            </summary>
            <param name="encryptText">加密后的文本</param>
            <param name="str">待验证字串</param>
            <param name="key">加密密钥</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.SHA512Encrypt(System.String)">
            <summary>
            SHA512 方式 加密
            </summary>
            <param name="str">待加密文本</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifySHA512Cryption(System.String,System.String)">
            <summary>
            校验 SHA512加密 是否一致
            </summary>
            <param name="encryptText">加密后的文本</param>
            <param name="str">待验证字串</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.HMACSHA512Encrypt(System.String,System.String)">
            <summary>
            HMACSHA512 方式 加密
            </summary>
            <param name="str">待加密文本</param>
            <param name="key">加密密钥</param>
            <returns>摘要文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.HashHelper.VerifyHMACSHA512Cryption(System.String,System.String,System.String)">
            <summary>
            校验 HMACSHA512加密 是否一致
            </summary>
            <param name="encryptText">加密后的文本</param>
            <param name="str">待验证字串</param>
            <param name="key">加密密钥</param>
            <returns>是否一致</returns>
        </member>
        <member name="T:Base.Util.Common.Utils.Cryption.MD5Length">
            <summary>
            16/32位MD5
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.MD5Length.L16">
            <summary>
            16位MD5
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.MD5Length.L32">
            <summary>
            32位MD5
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.Cryption.HashOption">
            <summary>
            哈希类型
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.HashOption.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.HashOption.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.HashOption.SHA256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.HashOption.SHA384">
            <summary>
            SHA384
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Cryption.HashOption.SHA512">
            <summary>
            SHA512
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.Cryption.RSAHelper">
            <summary>
            RSA 加密辅助类#
            AsymmetricAlgorithm 非对称性
            非对称性可逆加密
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="str">需要加密的明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="encode">已加密的密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.VerifyCryption(System.String,System.String)">
            <summary>
            校验 RSA加密 是否一致
            </summary>
            <param name="encode">加密后的密文</param>
            <param name="text">待验证明文</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="content">需要加密的明文</param>
            <param name="publicKey">加密公钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="encode">已加密的密文</param>
            <param name="privateKey">解密私钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.VerifyCryption(System.String,System.String,System.String)">
            <summary>
            校验 RSA加密 是否一致
            </summary>
            <param name="encode">加密后的密文</param>
            <param name="text">待验证明文</param>
            <param name="privateKey">解密私钥</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.GetRSAKeyPair">
            <summary>
            获取加密所使用的key，RSA算法是一种非对称密码算法，所谓非对称，就是指该算法需要一对密钥，使用其中一个加密，则需要用另一个才能解密。
            </summary>
            <returns>(公钥,私钥)</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.GetRSAPublicKey(System.String)">
            <summary>
            通过解密私钥 重新获取 加密公钥
            </summary>
            <param name="privateKey">解密私钥</param>
            <returns>公钥</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.VerifyKeyPairs(System.String,System.String)">
            <summary>
            校验 RSA密钥对 是否一致
            </summary>
            <param name="publicKey">加密公钥</param>
            <param name="privateKey">解密私钥</param>
            <returns>是否一致</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.GenSign(System.String,System.String,Base.Util.Common.Utils.Cryption.HashOption)">
            <summary>
            生成数字签名
            </summary>
            <param name="originalText">原文</param>
            <param name="privateKey">私钥</param>
            <param name="option">摘要类型</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.RSAHelper.VerifySign(System.String,System.String,System.String,Base.Util.Common.Utils.Cryption.HashOption)">
            <summary>
            验证签名
            </summary>
            <param name="originalText">原文</param>
            <param name="signedData">签名内容</param>
            <param name="publicKey">公钥</param>
            <param name="option">摘要类型</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Utils.Cryption.SensitiveHelper">
            <summary>
            脱敏 辅助类#
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.SensitiveHelper.SetSensitiveName(System.String)">
            <summary>
            姓名敏感处理
            </summary>
            <param name="fullName">姓名</param>
            <returns>脱敏后的姓名</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.SensitiveHelper.SetSensitiveIdCardNo(System.String)">
            <summary>
            身份证脱敏
            </summary>
            <param name="idCardNo">身份证号</param>
            <returns>脱敏后的身份证号</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.SensitiveHelper.SetSensitivePhone(System.String)">
            <summary>
            电话号码脱敏
            </summary>
            <param name="phone">电话号码</param>
            <returns>脱敏后的电话号码</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Cryption.SensitiveHelper.SetSensitiveTelephone(System.String)">
            <summary>
            手机号码脱敏
            </summary>
            <param name="telephone">手机号码</param>
            <returns>脱敏后的手机号码</returns>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.CNDate">
            <summary>
            农历属性
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.CNDate.cnIntYear">
            <summary>
            农历年(整型)
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.CNDate.cnIntMonth">
            <summary>
            农历月份(整型)
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.CNDate.cnIntDay">
            <summary>
            农历天(整型)
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.CNDate.cnStrYear">
            <summary>
            农历年(支干)
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.CNDate.cnStrMonth">
            <summary>
            农历月份(字符)
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.CNDate.cnStrDay">
            <summary>
            农历天(字符)
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.CNDate.cnAnm">
            <summary>
            农历属象
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.CNDate.cnSolarTerm">
            <summary>
            二十四节气
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.CNDate.cnFtvl">
            <summary>
            阴历节日
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.CNDate.cnFtvs">
            <summary>
            阳历节日
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.ChinaDate">
            <summary>
            公历转农历
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.lYearDays(System.Int32)">
            <summary>
            传回农历y年的总天数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.leapDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.leapMonth(System.Int32)">
            <summary>
            传回农历y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.monthDays(System.Int32,System.Int32)">
            <summary>
            传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.AnimalsYear(System.Int32)">
            <summary>
            传回农历y年的生肖
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.cyclicalm(System.Int32)">
            <summary>
            传入月日的offset 传回干支,0=甲子
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.cyclical(System.Int32)">
            <summary>
            传入offset 传回干支, 0=甲子
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.Lunar(System.Int32,System.Int32)">
            <summary>
            传出农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.calElement(System.Int32,System.Int32,System.Int32)">
            <summary>
            传出y年m月d日对应的农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.GetDaysByMonth(System.Int32,System.Int32)">
            <summary>
            传回公历y年m月的总天数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.GetMondayDateByDate(System.DateTime)">
            <summary>
            根据日期值获得周一的日期
            </summary>
            <param name="dt">输入日期</param>
            <returns>周一的日期</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChinaDate.getChinaDate(System.DateTime)">
            <summary>
            获取农历
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar">
            <summary>
            中国日历
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.SolarHolidayStruct">
            <summary>
            阳历
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.LunarHolidayStruct">
            <summary>
            农历
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.LunarDateArray">
             <summary>
             来源于网上的农历数据
             </summary>
             <remarks>
             数据结构如下，共使用17位数据
             第17位：表示闰月天数，0表示29天   1表示30天
             第16位-第5位（共12位）表示12个月，其中第16位表示第一月，如果该月为30天则为1，29天为0
             第4位-第1位（共4位）表示闰月是哪个月，如果当年没有闰月，则置0
            </remarks>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.#ctor(System.DateTime)">
            <summary>
            用一个标准的公历日期来初使化
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            用农历的日期来初使化
            </summary>
            <param name="cy">农历年</param>
            <param name="cm">农历月</param>
            <param name="cd">农历日</param>
            <param name="LeapFlag">闰月标志</param>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.GetChineseMonthDays(System.Int32,System.Int32)">
            <summary>
            //传回农历y年m月的总天数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.GetChineseLeapMonth(System.Int32)">
            <summary>
            传回农历 y年闰哪个月 1-12 , 没闰传回 0
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.GetChineseLeapMonthDays(System.Int32)">
            <summary>
            传回农历y年闰月的天数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.GetChineseYearDays(System.Int32)">
            <summary>
            取农历年一年的天数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.GetChineseHour(System.DateTime)">
            <summary>
            获得当前时间的时辰
            </summary> 
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.CheckDateLimit(System.DateTime)">
            <summary>
            检查公历日期是否符合要求
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.CheckChineseDateLimit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            检查农历日期是否合理
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ConvertNumToChineseNum(System.Char)">
            <summary>
            将0-9转成汉字形式
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.BitTest32(System.Int32,System.Int32)">
            <summary>
            测试某位是否为真
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ConvertDayOfWeek(System.DayOfWeek)">
            <summary>
            将星期几转成数字表示
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.CompareWeekDayHoliday(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            比较当天是不是指定的第周几
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.newCalendarHoliday">
            <summary>
            计算中国农历节日
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.WeekDayHoliday">
            <summary>
            按某月第几周第几日计算的节日
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.DateHoliday">
            <summary>
            按公历日计算的节日
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.Date">
            <summary>
            取对应的公历日期
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.WeekDay">
            <summary>
            取星期几
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.WeekDayStr">
            <summary>
            周几的字符
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.DateString">
            <summary>
            公历日期中文表示法 如一九九七年七月一日
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.IsLeapYear">
            <summary>
            当前是否公历闰年
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ChineseConstellation">
            <summary>
            28星宿计算
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ChineseHour">
            <summary>
            时辰
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.IsChineseLeapMonth">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.IsChineseLeapYear">
            <summary>
            当年是否有闰月
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ChineseDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ChineseDayString">
            <summary>
            农历日中文表示
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ChineseMonth">
            <summary>
            农历的月份
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ChineseMonthString">
            <summary>
            农历月份字符串
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ChineseYear">
            <summary>
            取农历年份
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ChineseYearString">
            <summary>
            取农历年字符串如，一九九七年
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ChineseDateString">
            <summary>
            取农历日期表示法：农历一九九七年正月初五
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.ChineseTwentyFourDay">
            <summary>
            定气法计算二十四节气,二十四节气是按地球公转来计算的，并非是阴历计算的
            </summary>
            <remarks>
            节气的定法有两种。古代历法采用的称为"恒气"，即按时间把一年等分为24份，
            每一节气平均得15天有余，所以又称"平气"。现代农历采用的称为"定气"，即
            按地球在轨道上的位置为标准，一周360°，两节气之间相隔15°。由于冬至时地
            球位于近日点附近，运动速度较快，因而太阳在黄道上移动15°的时间不到15天。
            夏至前后的情况正好相反，太阳在黄道上移动较慢，一个节气达16天之多。采用
            定气时可以保证春、秋两分必然在昼夜平分的那两天。
            </remarks>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.Constellation">
            <summary>
            计算指定日期的星座序号 
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.Animal">
            <summary>
            计算属相的索引，注意虽然属相是以农历年来区别的，但是目前在实际使用中是按公历来计算的
            鼠年为1,其它类推
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.AnimalString">
            <summary>
            取属相字符串
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.GanZhiYearString">
            <summary>
            取农历年的干支表示法如 乙丑年
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.GanZhiMonthString">
            <summary>
            取干支的月表示字符串，注意农历的闰月不记干支
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.GanZhiDayString">
            <summary>
            取干支日表示法
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.ChineseCalendar.GanZhiDateString">
            <summary>
            取当前日期的干支表示法如 甲子年乙丑月丙庚日
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper">
            <summary>
            日期 辅助类#
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.ToDateTime(System.String)">
            <summary>
            时间戳转为C#格式时间
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.ToDateTime(System.Int64)">
            <summary>
            时间戳转为C#格式时间
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.ToUnixTime(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式(秒)
            </summary>
            <param name="time"></param>
            <returns>单位 秒</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.ToUnixTimeMilliSecond(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式（毫秒）
            </summary>
            <param name="time"></param>
            <returns>单位 秒</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetOneHourBefore">
            <summary>
            获取1小时前时间（以5分钟为一结果）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.SecondToMinute(System.Int32)">
            <summary>
            把秒转换成分钟
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetMonthLastDate(System.DateTime)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="d">时间</param>
            <returns>日</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetMonthLastDate(System.Int32,System.Int32)">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <returns>日</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetMonthLastDate(System.Nullable{System.DateTime})">
            <summary>
            返回某年某月最后一天
            </summary>
            <param name="d">时间</param>
            <returns>日</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            返回时间差
            </summary>
            <param name="DateTime1"></param>
            <param name="DateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.DateDiff2(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期的间隔
            </summary>
            <param name="DateTime1">日期一。</param>
            <param name="DateTime2">日期二。</param>
            <returns>日期间隔TimeSpan。</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetYearsOfTwoDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取两个时间差：返回 年
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetMonthsOfTwoDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取两个时间差：返回 月
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetDaysOfTwoDate(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取两个时间差：返回 天
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetFormatDate(System.DateTime,System.String)">
            <summary>
            返回指定格式的日期
            </summary>
            <param name="dt">年月日分隔符</param>
            <param name="dateTimeFormat">yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetFormatDate(System.Nullable{System.DateTime},System.String)">
            <summary>
            返回指定格式的日期
            </summary>
            <param name="dt">年月日分隔符</param>
            <param name="dateTimeFormat">yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.DateFormat(System.String)">
            <summary>
            获取日期格式
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.ParseToDateValue(System.Object)">
            <summary>
            将对象转换成可空日期
            </summary>
            <param name="dateObj"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetQuarter(System.DateTime)">
            <summary>
            获取日期对应的季度
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetQuarter(System.Nullable{System.DateTime})">
            <summary>
            获取日期对应的季度
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetWeekUpOfDate(System.DateTime,System.DayOfWeek,System.Int32)">
            <summary>
            获取对应日期第几周
            </summary>
            <param name="dt"></param>
            <param name="weekday"></param>
            <param name="Number"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetWeekUpOfDate(System.Nullable{System.DateTime},System.DayOfWeek,System.Int32)">
            <summary>
            获取对应日期第几周
            </summary>
            <param name="dt"></param>
            <param name="weekday"></param>
            <param name="Number"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.WeekOfMonth(System.DateTime,System.Int32)">
            <summary>
            获取日期是当月的第几周
            </summary>
            <param name="day"></param>
            <param name="WeekStart">1表示 周一至周日 为一周 2表示 周日至周六 为一周</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.WeekOfMonth(System.Nullable{System.DateTime},System.Int32)">
            <summary>
            获取日期是当月的第几周
            </summary>
            <param name="day"></param>
            <param name="WeekStart">1表示 周一至周日 为一周 2表示 周日至周六 为一周</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetStartDateTime(System.DateTime)">
            <summary>
            获取以0点0分0秒开始的日期
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetStartDateTime(System.Nullable{System.DateTime})">
            <summary>
            获取以0点0分0秒开始的日期
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetEndDateTime(System.DateTime)">
            <summary>
            获取以23点59分59秒结束的日期
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetEndDateTime(System.Nullable{System.DateTime})">
            <summary>
            获取以23点59分59秒结束的日期
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetDateRangeTuple(System.DateTime,Base.Util.Common.Utils.DataTypeHelper.DateFrequency)">
            <summary>
            根据不同周期计算出起始日期和结束日期
            </summary>
            <param name="date"></param>
            <param name="judgeFrequency"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetDateRangeTuple(System.Nullable{System.DateTime},Base.Util.Common.Utils.DataTypeHelper.DateFrequency)">
            <summary>
            计算出起始日期和结束日期
            </summary>
            <param name="date"></param>
            <param name="judgeFrequency"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetDateRange(System.DateTime,Base.Util.Common.Utils.DataTypeHelper.DateFrequency)">
            <summary>
            根据不同周期计算出起始日期和结束日期
            </summary>
            <param name="date"></param>
            <param name="judgeFrequency"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetDateRange(System.Nullable{System.DateTime},Base.Util.Common.Utils.DataTypeHelper.DateFrequency)">
            <summary>
            计算出起始日期和结束日期
            </summary>
            <param name="date"></param>
            <param name="judgeFrequency"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetDateRange(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            计算出起始日期和结束日期
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="year"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetDateRange(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根据年月计算出起始日期和结束日期
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetDateRange(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            计算出起始日期和结束日期
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="year"></param>
            <param name="season"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.GetDateRange(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            根据不同周期计算出起始日期和结束日期
            </summary>
            <param name="year"></param>
            <param name="season"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.DateTimeHelper.CalculateDateRange(System.Nullable{System.DateTime},Base.Util.Common.Utils.DataTypeHelper.DateFrequency)">
            <summary>
            周期计算时间范围
            </summary>
            <param name="date"></param>
            <param name="judgeFrequency"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.DateFrequency">
            <summary>
            时间周期枚举
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.EnumHelper">
            <summary>
            枚举 辅助类#
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.IsDefinedEnum(System.Type,System.Object)">
            <summary>
            判断value是否被枚举定义
            </summary>
            <param name="type">typeof(enum)类型</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.IsDefinedEnumDesc(System.Type,System.String)">
            <summary>
            判断value是否被枚举定义(描述属性)
            </summary>
            <param name="type">typeof(enum)类型</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetLength``1">
            <summary>
            获取对应的枚举的枚举长度个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetLength(System.Type)">
            <summary>
            获取对应的枚举的枚举长度个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetMax``1">
            <summary>
            获取对应的枚举的最大值枚举
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetMin``1">
            <summary>
            获取对应的枚举的最小值枚举
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnum(System.Type,System.String)">
            <summary>
            获取对应的枚举
            </summary>
            <param name="type">typeof(enum)类型</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnum``1(``0)">
            <summary>
            获取对应的枚举
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumInt(System.Type,System.String)">
            <summary>
            获取枚举对应的int值
            </summary>
            <param name="type">typeof(enum)类型</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumInt``1(``0)">
            <summary>
            获取枚举对应的int值
            </summary>
            <param name="@enum">typeof(enum)类型</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumValue(System.Type,System.Int32)">
            <summary>
            获取枚举对应的string值
            </summary>
            <param name="type">typeof(enum)类型</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumValue``1(``0)">
            <summary>
            获取枚举对应的string值
            </summary>
            <param name="@enum">typeof(enum)类型</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumDesc(System.Type,System.String)">
            <summary>
            获取枚举对应的属性值
            </summary>
            <param name="type">typeof(enum)类型</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumDesc(System.Type,System.Int32)">
            <summary>
            获取枚举对应的属性值
            </summary>
            <param name="type">typeof(enum)类型</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumDesc``1(``0)">
            <summary>
            获取枚举对应的属性值
            </summary>
            <param name="@enum">typeof(enum)类型</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumArray(System.Type)">
            <summary>
            获取枚举数组
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumArray``1">
            <summary>
            获取枚举数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumDictionary(System.Type)">
            <summary>
            枚举转字典(无需获取描述时使用)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumDictionary``1">
            <summary>
            枚举转字典(无需获取描述时使用)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumDictionaryAttr(System.Type)">
            <summary>
            枚举转字典(需获取描述时使用)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.EnumHelper.GetEnumDictionaryAttr``1">
            <summary>
            枚举转字典(无需获取描述时使用)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.NumberHelper">
            <summary>
            数字 辅助类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.ParseToDecimalValue(System.Object)">
            <summary>
            将object转换成数字
            </summary>
            <param name="decimalObj"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.ConvertNumToZHUpperCase(System.Decimal)">
            <summary>
            转中文大写数字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.ConvertNumToZHUpperCase(System.Nullable{System.Decimal})">
            <summary>
            转中文大写数字
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.ToFixed(System.Decimal,System.Int32)">
            <summary>
            截取指定位数
            </summary>
            <param name="d"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.ToFixed(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            截取指定位数
            </summary>
            <param name="d"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.ToFixed(System.Double,System.Int32)">
            <summary>
             截取指定位数
            </summary>
            <param name="d"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.ToFixed(System.Nullable{System.Double},System.Int32)">
            <summary>
             截取指定位数
            </summary>
            <param name="d"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.ToFixed(System.Single,System.Int32)">
            <summary>
             截取指定位数
            </summary>
            <param name="d"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.ToFixed(System.Nullable{System.Single},System.Int32)">
            <summary>
             截取指定位数
            </summary>
            <param name="d"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.GetPercent(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            计算百分比
            </summary>
            <param name="numerator">分子</param>
            <param name="denominator">分母</param>
            <param name="s">小数点保留位数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.GetPercent(System.Double,System.Double,System.Int32)">
            <summary>
            计算百分比
            </summary>
            <param name="numerator">分子</param>
            <param name="denominator">分母</param>
            <param name="s">小数点保留位数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.GetPercent(System.Single,System.Single,System.Int32)">
            <summary>
            计算百分比
            </summary>
            <param name="numerator">分子</param>
            <param name="denominator">分母</param>
            <param name="s">小数点保留位数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.GetPercent(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算百分比
            </summary>
            <param name="numerator">分子</param>
            <param name="denominator">分母</param>
            <param name="s">小数点保留位数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.GetAverage(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            计算平均值
            </summary>
            <param name="numerator">分子</param>
            <param name="denominator">分母</param>
            <param name="s">小数点保留位数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.GetAverage(System.Double,System.Double,System.Int32)">
            <summary>
            计算平均值
            </summary>
            <param name="numerator">分子</param>
            <param name="denominator">分母</param>
            <param name="s">小数点保留位数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.GetAverage(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算平均值
            </summary>
            <param name="numerator">分子</param>
            <param name="denominator">分母</param>
            <param name="s">小数点保留位数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.GetAverage(System.Single,System.Single,System.Int32)">
            <summary>
            计算平均值
            </summary>
            <param name="numerator">分子</param>
            <param name="denominator">分母</param>
            <param name="s">小数点保留位数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.CalculateAngle(System.Int32,System.Int32)">
            <summary>
            根据直角边计算斜边和角度
            </summary>
            <param name="height"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.NumberHelper.MathExpression(System.String)">
            <summary>
            算数表达式
            </summary>
            <param name="strExpression"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.EnumFormula">
            <summary>
            科学计算
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.Add">
            <summary>
            加法
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.Dec">
            <summary>
            减法
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.Mul">
            <summary>
            乘法
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.Div">
            <summary>
            除法
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.Sin">
            <summary>
            正玄计算
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.Cos">
            <summary>
            余玄计算
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.Tan">
            <summary>
            正切计算
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.ATan">
            <summary>
            余切计算
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.Sqrt">
            <summary>
            平方根计算
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.Pow">
            <summary>
            求幂计算
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.DataTypeHelper.EnumFormula.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.RandomHelper">
            <summary>
            随机数 辅助类#
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.Instance">
            <summary>
            静态实例
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.Minimum">
            <summary>
            设置最小值
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.Maximal">
            <summary>
            设置最大值
            </summary>
        </member>
        <member name="P:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.RandomLength">
            <summary>
            设置随机长度
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.#ctor(System.String)">
            <summary>
            指定随机字符串 
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.#ctor(System.Int32,System.Int32)">
            <summary>
            指定随机最小值和最大值
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.#ctor(System.DateTime,System.DateTime)">
            <summary>
            指定随机起始时间和结束时间
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomString">
            <summary>
            产生随机字符
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomString(System.Int32)">
            <summary>
            获取随机字符串
            </summary>
            <param name="stringLength">随机字符串长度</param>
            <returns>返回随机字符串</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomInt">
            <summary>
            产生随机数
            </summary>
            <returns>随机数</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomInt(System.Int32,System.Int32)">
            <summary>
            产生随机数
            </summary>
            <param name="minNumber">最小值</param>
            <param name="maxNumber">最大值</param>
            <returns>随机数</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomDecimal(System.Int32)">
            <summary>
            产生随机数
            </summary>
            <param name="s">小数保留位数</param>
            <returns>随机数</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomDecimal(System.Int32,System.Int32,System.Int32)">
            <summary>
            产生随机数
            </summary>
            <param name="minNumber">最小值</param>
            <param name="maxNumber">最大值</param>
            <param name="s">小数保留位数</param>
            <returns>随机数</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomTime">
            <summary>
            得到随机日期
            </summary>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomTime(System.DateTime,System.DateTime)">
            <summary>
            得到随机日期
            </summary>
            <param name="time1">起始日期</param>
            <param name="time2">结束日期</param>
            <returns>间隔日期之间的 随机日期</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomArray``1(System.Collections.Generic.List{``0}@)">
            <summary>
            对一个数组进行随机排序
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="list">需要随机排序的列表</param>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomArray``1(``0[])">
            <summary>
            对一个数组进行随机排序
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="arr">需要随机排序的数组</param>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.RandomHelper.GetRandomSeed">
            <summary>
            获取随机基准值
            </summary>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Utils.DataTypeHelper.StringHelper">
            <summary>
            string 辅助类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.GetSortPropertyName``1(System.String,System.String)">
            <summary>
            获取类的排序用字段
            </summary>
            <param name="propertyName">需排序字段</param>
            <param name="defaultPropertyName">默认排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.String,System.Char,System.String[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="str"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.String,System.String,System.String[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="str"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.String,System.Char,System.Int32[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="str"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.String,System.String,System.Int32[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="str"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.String[],System.Char,System.String[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="strArr"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.String[],System.String,System.String[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="strArr"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.String[],System.Char,System.Int32[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="strArr"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.String[],System.String,System.Int32[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="strArr"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.Collections.Generic.List{System.String},System.Char,System.String[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="strArr"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.Collections.Generic.List{System.String},System.String,System.String[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="strArr"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.Collections.Generic.List{System.String},System.Char,System.Int32[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="strArr"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Combine(System.Collections.Generic.List{System.String},System.String,System.Int32[])">
            <summary>
            按规则添加新的string集合并去重拼接
            </summary>
            <param name="strArr"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.CombineList(System.String,System.Char,System.String[])">
            <summary>
            按规则添加新的string集合并去重
            </summary>
            <param name="str"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.CombineList(System.String,System.String,System.String[])">
            <summary>
            按规则添加新的string集合并去重
            </summary>
            <param name="str"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.CombineArray(System.String,System.Char,System.String[])">
            <summary>
            按规则添加新的string集合并去重
            </summary>
            <param name="str"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.CombineArray(System.String,System.String,System.String[])">
            <summary>
            按规则添加新的string集合并去重
            </summary>
            <param name="str"></param>
            <param name="separator">分隔符</param>
            <param name="newStrs">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.DelLastString(System.String,System.Char)">
            <summary>
            删除最后结尾的一个特定字符串
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.DelLastString(System.String,System.String)">
            <summary>
            删除最后结尾的一个特定字符串
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.SplitMulti(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="str"></param>
            <param name="splitstr"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.StrLength(System.String)">
            <summary>
            得到字符串长度，一个汉字长度为2
            </summary>
            <param name="inputString">参数字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.PadStart(System.String,System.Int32,System.String)">
            <summary>
            指定字符串的固定长度，如果字符串小于固定长度，
            则在字符串的前面补足零，可设置的固定长度最大为9位
            </summary>
            <param name="inputString">原始字符串</param>
            <param name="limitedLength">字符串的固定长度</param>
            <param name="fixStr">补位字符</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.PadEnd(System.String,System.Int32,System.String)">
            <summary>
            指定字符串的固定长度，如果字符串小于固定长度，
            则在字符串的后面补足零，可设置的固定长度最大为9位
            </summary>
            <param name="inputString">原始字符串</param>
            <param name="limitedLength">字符串的固定长度</param>
            <param name="fixStr">补位字符</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.GetRandomArrayByStr(System.String)">
            <summary>
            乱序排列字符串
            </summary>
            <param name="str">原始字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.ToSensitive(System.String,System.Int32,System.Int32)">
            <summary>
            字符串脱敏
            </summary>
            <param name="str">原始字符串</param>
            <param name="startIndex">脱敏起始字符串位数</param>
            <param name="num">脱敏字符串位数</param>
            <returns>脱敏后的字符串</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.ToNormalString(System.String)">
            <summary>
            去除转义或特殊字符
            </summary>
            <param name="input">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.ToSBC(System.String)">
            <summary>
            转全角的函数(SBC case)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.ToDBC(System.String)">
            <summary>
             转半角的函数(SBC case)
            </summary>
            <param name="input">输入</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.IsSafeSqlString(System.String)">
            <summary>
            检测是否有Sql危险字符
            </summary>
            <param name="str">要判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Filter(System.String)">
            <summary>
            检查危险字符
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.SqlFilter(System.String,System.String)">
            <summary> 
            检查过滤设定的危险字符
            </summary> 
            <param name="InText">要过滤的字符串 </param> 
            <returns>如果参数存在不安全字符，则返回true </returns> 
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.HtmlToTxt(System.String)">
            <summary>
            HTML转行成TEXT
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.Htmls(System.String)">
            <summary>
            过滤特殊字符
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.StrToId(System.String)">
            <summary>
            获取正确的Id，如果不是正整数，返回0
            </summary>
            <param name="_value"></param>
            <returns>返回正确的整数ID，失败返回0</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.IsNumberId(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的，一般用于查询字符串参数的有效性验证。(0除外)
            </summary>
            <param name="_value">需验证的字符串。。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.DataTypeHelper.StringHelper.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式。
            </summary>
            <param name="_express">正则表达式的内容。</param>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="T:Base.Util.Common.Utils.IO.FileHelper">
            <summary>
            文件操作 辅助类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.String64ToBytes(System.String)">
            <summary> 
            将 Base64String 转成 byte[] 
            </summary> 
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.BytesToString64(System.Byte[])">
            <summary> 
            将 byte[] 转成 Base64String 
            </summary> 
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.StreamToBytes(System.IO.Stream)">
            <summary> 
            将 Stream 转成 byte[] 
            </summary> 
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.BytesToStream(System.Byte[])">
            <summary> 
            将 byte[] 转成 Stream 
            </summary> 
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.String64ToStream(System.String)">
            <summary> 
            将 Base64String 转成 byte[] 
            </summary> 
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.StreamToString64(System.IO.Stream)">
            <summary> 
            将 byte[] 转成 Base64String 
            </summary> 
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.StreamToFile(System.IO.Stream,System.String)">
            <summary> 
            将 Stream 写入文件 
            </summary> 
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FileToStream(System.String)">
            <summary> 
            从文件读取 Stream 
            </summary> 
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.WriteText(System.String,System.String,System.Text.Encoding)">
            <summary>
            向文本文件中写入内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.AppendText(System.String,System.String)">
            <summary>
            向文本文件的尾部追加内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">写入的内容</param>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FileExists(System.String)">
            <summary>
            检查文件是否存在
            </summary>
            <param name="filePath">完整路径（包括文件名）</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.GetFileExtension(System.String)">
            <summary>
            读取文件后缀
            </summary>
            <param name="filePath">完整路径（包括文件名）</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.GetFileExt(System.String)">
            <summary>
            读取文件后缀
            </summary>
            <param name="filePath">完整路径（包括文件名）</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FileCreate(System.String)">
            <summary>
            创建或读取文件数据
            </summary>
            <param name="filePath">完整路径（包括文件名）</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FileRead(System.String)">
            <summary>
            创建或读取文件数据
            </summary>
            <param name="filePath">完整路径（包括文件名）</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FileStreamRead(System.String,System.IO.FileMode)">
            <summary>
            读取文件数据流
            </summary>
            <param name="filePath">完整路径（包括文件名）</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FileCopy(System.String,System.String,System.Boolean)">
            <summary>
            拷贝文件
            </summary>
            <param name="OrignFile">原始文件</param>
            <param name="NewFile">新文件路径</param>
            <param name="overwrite">是否复写</param>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FileMove(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="OrignFile">原始路径</param>
            <param name="NewFile">新路径</param>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FileDelete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.GetFileAttibe(System.String)">
            <summary>
            获取指定文件详细属性
            </summary>
            <param name="filePath">文件详细路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FolderExists(System.String)">
            <summary>
            检查文件夹是否存在
            </summary>
            <param name="floder">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FolderCreate(System.String)">
            <summary>
            创建文件夹
            如果文件夹不存在则创建
            </summary>
            <param name="floder">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FolderDelete(System.String)">
            <summary>
            删除文件夹目录及文件(递归)
            </summary>
            <param name="floder"></param>  
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FolderCopy(System.String,System.String)">
            <summary>
            指定文件夹下面的所有内容copy到目标文件夹下面(递归)
            </summary>
            <param name="srcPath">原始路径</param>
            <param name="aimPath">目标文件夹</param>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.FolderMove(System.String,System.String)">
            <summary>
            指定文件夹下面的所有内容 移动 到目标文件夹下面(递归)
            </summary>
            <param name="srcPath">原始路径</param>
            <param name="aimPath">目标文件夹</param>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.GetFolderLength(System.String)">
            <summary>
            获取文件夹大小
            </summary>
            <param name="folder">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.GetDirectoryInfo(System.String,System.Collections.Generic.List{System.IO.DirectoryInfo})">
            <summary>
            递归文件夹-找到所有文件夹
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.GetFoldAll(System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件
            </summary>
            <param name="Path">详细路径</param>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.ListTreeShow(System.IO.DirectoryInfo,System.Int32,System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件函数
            </summary>
            <param name="theDir">指定目录</param>
            <param name="nLevel">默认起始值,调用时,一般为0</param>
            <param name="Rn">用于迭加的传入值,一般为空</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.GetFoldAll(System.String,System.String,System.String)">
             <summary>
             获取指定文件夹下所有子目录及文件(下拉框形)
             </summary>
             <param name="Path">详细路径</param>
            <param name="DropName">下拉列表名称</param>
            <param name="tplPath">默认选择模板名称</param>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.FileHelper.ListTreeShow(System.IO.DirectoryInfo,System.Int32,System.String,System.String)">
            <summary>
            获取指定文件夹下所有子目录及文件函数
            </summary>
            <param name="theDir">指定目录</param>
            <param name="nLevel">默认起始值,调用时,一般为0</param>
            <param name="Rn">用于迭加的传入值,一般为空</param>
            <param name="tplPath">默认选择模板名称</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Utils.IO.INIFile">
            <summary>
            INI文件读写类。
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.INIFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            写INI文件
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.INIFile.IniReadValue(System.String,System.String)">
            <summary>
            读取INI文件
            </summary>
            <param name="Section"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.INIFile.ClearAllSection">
            <summary>
            删除ini文件下所有段落
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.IO.INIFile.ClearSection(System.String)">
            <summary>
            删除ini文件下personal段落下的所有键
            </summary>
            <param name="Section"></param>
        </member>
        <member name="T:Base.Util.Common.Utils.MIME.MimeHelper">
            <summary>
            Mime 辅助类
            </summary>
        </member>
        <member name="T:Base.Util.Common.Utils.NetWork.NetHelper">
            <summary>
            网络 辅助类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.IsIP(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.GetValidPort(System.String)">
            <summary>
            检查设置的端口号是否正确，并返回正确的端口号,无效端口号返回-1。
            </summary>
            <param name="port">设置的端口号</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.Ping(System.String)">
            <summary>
            cmd 命令ping 操作 查看当前Ip是否畅通
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.StringToIPAddress(System.String)">
            <summary>
            将字符串形式的IP地址转换成IPAddress对象
            </summary>
            <param name="ip">字符串形式的IP地址</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.GetRemoteIp(System.String)">
            <summary>
            获取远程IP
            </summary>
            <param name="remoteIp">远程IP</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.GetLocalIp">
            <summary>
            获取本地IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.LocalHostName">
            <summary>
            获取本机的计算机名
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.LANIP">
            <summary>
            获取本机的局域网IP
            </summary>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.WANIP">
            <summary>
            获取本机在Internet网络的广域网IP
            </summary>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.GetClientIP(System.Net.Sockets.Socket)">
            <summary>
            获取远程客户机的IP地址
            </summary>
            <param name="clientSocket">客户端的socket对象</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.CreateIPEndPoint(System.String,System.Int32)">
            <summary>
            创建一个IPEndPoint对象
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口号</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.CreateTcpListener">
            <summary>
            创建一个自动分配IP和端口的TcpListener对象
            </summary>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.CreateTcpListener(System.String,System.Int32)">
            <summary>
            创建一个TcpListener对象
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.CreateTcpSocket">
            <summary>
            创建一个基于TCP协议的Socket对象
            </summary>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.CreateUdpSocket">
            <summary>
            创建一个基于UDP协议的Socket对象
            </summary>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.GetLocalPoint(System.Net.Sockets.TcpListener)">
            <summary>
            获取TcpListener对象的本地终结点
            </summary>
            <param name="tcpListener">TcpListener对象</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.GetLocalPoint_IP(System.Net.Sockets.TcpListener)">
            <summary>
            获取TcpListener对象的本地终结点的IP地址
            </summary>
            <param name="tcpListener">TcpListener对象</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.GetLocalPoint_Port(System.Net.Sockets.TcpListener)">
            <summary>
            获取TcpListener对象的本地终结点的端口号
            </summary>
            <param name="tcpListener">TcpListener对象</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.GetLocalPoint(System.Net.Sockets.Socket)">
            <summary>
            获取Socket对象的本地终结点
            </summary>
            <param name="socket">Socket对象</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.GetLocalPoint_IP(System.Net.Sockets.Socket)">
            <summary>
            获取Socket对象的本地终结点的IP地址
            </summary>
            <param name="socket">Socket对象</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.GetLocalPoint_Port(System.Net.Sockets.Socket)">
            <summary>
            获取Socket对象的本地终结点的端口号
            </summary>
            <param name="socket">Socket对象</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.BindEndPoint(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            绑定终结点
            </summary>
            <param name="socket">Socket对象</param>
            <param name="endPoint">要绑定的终结点</param>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.BindEndPoint(System.Net.Sockets.Socket,System.String,System.Int32)">
            <summary>
            绑定终结点
            </summary>
            <param name="socket">Socket对象</param>        
            <param name="ip">服务器IP地址</param>
            <param name="port">服务器端口</param>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.StartListen(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            指定Socket对象执行监听，默认允许的最大挂起连接数为100
            </summary>
            <param name="socket">执行监听的Socket对象</param>
            <param name="port">监听的端口号</param>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.StartListen(System.Net.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            指定Socket对象执行监听
            </summary>
            <param name="socket">执行监听的Socket对象</param>
            <param name="port">监听的端口号</param>
            <param name="maxConnection">允许的最大挂起连接数</param>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.StartListen(System.Net.Sockets.Socket,System.String,System.Int32,System.Int32)">
            <summary>
            指定Socket对象执行监听
            </summary>
            <param name="socket">执行监听的Socket对象</param>
            <param name="ip">监听的IP地址</param>
            <param name="port">监听的端口号</param>
            <param name="maxConnection">允许的最大挂起连接数</param>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.Connect(System.Net.Sockets.Socket,System.String,System.Int32)">
            <summary>
            连接到基于TCP协议的服务器,连接成功返回true，否则返回false
            </summary>
            <param name="socket">Socket对象</param>
            <param name="ip">服务器IP地址</param>
            <param name="port">服务器端口号</param>     
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.SendMsg(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            以同步方式向指定的Socket对象发送消息
            </summary>
            <param name="socket">socket对象</param>
            <param name="msg">发送的消息</param>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.SendMsg(System.Net.Sockets.Socket,System.String)">
            <summary>
            使用UTF8编码格式以同步方式向指定的Socket对象发送消息
            </summary>
            <param name="socket">socket对象</param>
            <param name="msg">发送的消息</param>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.ReceiveMsg(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            以同步方式接收消息
            </summary>
            <param name="socket">socket对象</param>
            <param name="buffer">接收消息的缓冲区</param>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.ReceiveMsg(System.Net.Sockets.Socket)">
            <summary>
            以同步方式接收消息，并转换为UTF8编码格式的字符串,使用5000字节的默认缓冲区接收。
            </summary>
            <param name="socket">socket对象</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.Close(System.Net.Sockets.Socket)">
            <summary>
            关闭基于Tcp协议的Socket对象
            </summary>
            <param name="socket">要关闭的Socket对象</param>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.NetHelper.SendEmail(System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送电子邮件,所有SMTP配置信息均在config配置文件中system.net节设置.
            </summary>
            <param name="receiveEmail">接收电子邮件的地址</param>
            <param name="msgSubject">电子邮件的标题</param>
            <param name="msgBody">电子邮件的正文</param>
            <param name="IsEnableSSL">是否开启SSL</param>
        </member>
        <member name="T:Base.Util.Common.Utils.NetWork.UploadEventArgs">
            <summary>    
            上传数据参数    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.UploadEventArgs.BytesSent">
            <summary>       
            已发送的字节数    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.UploadEventArgs.TotalBytes">
            <summary>    
            总字节数    
            </summary>    
        </member>
        <member name="T:Base.Util.Common.Utils.NetWork.DownloadEventArgs">
            <summary>    
            下载数据参数    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.DownloadEventArgs.BytesReceived">
            <summary>    
            已接收的字节数    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.DownloadEventArgs.TotalBytes">
            <summary>    
            总字节数    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.DownloadEventArgs.ReceivedData">
            <summary>    
            当前缓冲区接收的数据    
            </summary>    
        </member>
        <member name="T:Base.Util.Common.Utils.NetWork.WebClientHelper">
            <summary>
            网络客户端帮助类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.#ctor">
            <summary>    
            创建WebClient的实例    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.WebClientHelper.BufferSize">
            <summary>    
            设置发送和接收的数据缓冲大小    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.WebClientHelper.ResponseHeaders">
            <summary>    
            获取响应头集合    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.WebClientHelper.RequestHeaders">
            <summary>    
            获取请求头集合    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.WebClientHelper.Proxy">
            <summary>    
            获取或设置代理    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.WebClientHelper.Encoding">
            <summary>    
            获取或设置请求与响应的文本编码方式    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.WebClientHelper.RespHtml">
            <summary>    
            获取或设置响应的html代码    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.WebClientHelper.CookieContainer">
            <summary>    
            获取或设置与请求关联的Cookie容器    
            </summary>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.GetHtml(System.String)">
            <summary>    
             获取网页源代码    
            </summary>    
            <param name="url">网址</param>    
            <returns></returns>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.DownloadFile(System.String,System.String)">
            <summary>    
            下载文件    
            </summary>    
            <param name="url">文件URL地址</param>    
            <param name="filename">文件保存完整路径</param>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.GetData(System.String)">
            <summary>    
            从指定URL下载数据    
            </summary>    
            <param name="url">网址</param>    
            <returns></returns>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.Post(System.String,System.String)">
            <summary>    
            向指定URL发送文本数据    
            </summary>    
            <param name="url">网址</param>    
            <param name="postData">urlencode编码的文本数据</param>    
            <returns></returns>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.Post(System.String,System.Byte[])">
            <summary>    
            向指定URL发送字节数据    
            </summary>    
            <param name="url">网址</param>    
            <param name="postData">发送的字节数组</param>    
            <returns></returns>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.Post(System.String,Base.Util.Common.Utils.NetWork.MultipartForm)">
            <summary>    
            向指定网址发送mulitpart编码的数据    
            </summary>    
            <param name="url">网址</param>    
            <param name="mulitpartForm">mulitpart form data</param>    
            <returns></returns>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.GetData(System.Net.HttpWebRequest)">
            <summary>    
            读取请求返回的数据    
            </summary>    
            <param name="request">请求对象</param>    
            <returns></returns>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.PostData(System.Net.HttpWebRequest,System.Byte[])">
            <summary>    
            发送请求数据    
            </summary>    
            <param name="request">请求对象</param>    
            <param name="postData">请求发送的字节数组</param>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.CreateRequest(System.String,System.String)">
            <summary>    
            创建HTTP请求    
            </summary>    
            <param name="url">URL地址</param>    
            <returns></returns>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.SaveCookiesToDisk">
            <summary>    
            将Cookie保存到磁盘    
            </summary>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.WebClientHelper.LoadCookiesFromDisk">
            <summary>    
            从磁盘加载Cookie    
            </summary>    
        </member>
        <member name="T:Base.Util.Common.Utils.NetWork.MultipartForm">
            <summary>    
            对文件和文本数据进行Multipart形式的编码    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.MultipartForm.FormData">
            <summary>    
            获取编码后的字节数组    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.MultipartForm.ContentType">
            <summary>    
            获取此编码内容的类型    
            </summary>    
        </member>
        <member name="P:Base.Util.Common.Utils.NetWork.MultipartForm.StringEncoding">
            <summary>    
            获取或设置对字符串采用的编码类型    
            </summary>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.MultipartForm.#ctor">
            <summary>    
            实例化    
            </summary>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.MultipartForm.AddFlie(System.String,System.String)">
            <summary>    
            添加一个文件    
            </summary>    
            <param name="name">文件域名称</param>    
            <param name="filename">文件的完整路径</param>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.MultipartForm.AddFlie(System.String,System.String,System.Byte[],System.Int32)">
            <summary>    
            添加一个文件    
            </summary>    
            <param name="name">文件域名称</param>    
            <param name="filename">文件名</param>    
            <param name="fileData">文件二进制数据</param>    
            <param name="dataLength">二进制数据大小</param>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.MultipartForm.AddString(System.String,System.String)">
            <summary>    
            添加字符串    
            </summary>    
            <param name="name">文本域名称</param>    
            <param name="value">文本值</param>    
        </member>
        <member name="M:Base.Util.Common.Utils.NetWork.MultipartForm.GetContentType(System.String)">
            <summary>    
            从注册表获取文件类型    
            </summary>    
            <param name="filename">包含扩展名的文件名</param>    
            <returns>如：application/stream</returns>    
        </member>
        <member name="T:Base.Util.Common.Utils.PinYin.PinYinConvertHelper">
            <summary>
            拼音转换 辅助类#
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.PinYin.PinYinConvertHelper.PyValue">
            <summary>
            定义拼音区编码数组
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.PinYin.PinYinConvertHelper.PyName">
            <summary>
            定义拼音数组
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.PinYin.PinYinConvertHelper.gb2312">
            <summary>
            编码格式 GB2312 支持中文
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.PinYin.PinYinConvertHelper.ConvertPinYin(System.String)">
            <summary>
            汉字转换成全拼的拼音
            </summary>
            <param name="hzString">汉字字符串</param>
            <returns>转换后的拼音字符串</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.PinYin.PinYinConvertHelper.ConvertPinYinFirstSpell(System.String)">
            <summary>
            取汉字拼音的首字母
            </summary>
            <param name="UnName">汉字</param>
            <returns>首字母</returns>
        </member>
        <member name="T:Base.Util.Common.Utils.Reflection.ReflectHelper">
            <summary>
            反射 辅助类#
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.ReflectGetter(System.Object,System.String)">
            <summary>
            反射获取对象的属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.ReflectSetter(System.Object,System.String,System.Object)">
            <summary>
            反射设置对象的属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <param name="propertyValue">属性值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.ExpressionGetter``1(System.String)">
            <summary>
            表达式获取对象的属性值
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.ExpressionSetter``1(System.String)">
            <summary>
            表达式设置对象的属性值
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.CreateInstance``1(System.String,System.String,System.String)">
            <summary>
            创建对象实例
            </summary>
            <typeparam name="TResult">对象类型</typeparam>
            <param name="assemblyName">程序集名称</param>
            <param name="nameSpace">命名空间</param>
            <param name="className">类名</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.GetMethodBy(System.Int32)">
            <summary>
            获取之前步骤方法信息
            </summary>
            <param name="index">第几个步骤前</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.GetMethodByFrame(System.Int32)">
            <summary>
            获取之前步骤方法信息
            </summary>
            <param name="index">第几个步骤前</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.GetMethodNameByFrame(System.Int32)">
            <summary>
            步骤方法名
            </summary>
            <param name="index">第几个步骤前</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.GetInvokeMethod``1(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            调用方法实例
            </summary>
            <typeparam name="TResult">对象类型</typeparam>
            <param name="assemblyName">程序集名称</param>
            <param name="nameSpace">命名空间</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.GetInvokeMethodAsync``1(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            调用方法实例（异步）
            </summary>
            <typeparam name="TResult">对象类型</typeparam>
            <param name="assemblyName">程序集名称</param>
            <param name="nameSpace">命名空间</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.GetInvokePrivateTMethodAsync``2(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            调用方法实例（异步 + 私有 + 泛型方法）
            </summary>
            <typeparam name="TResult">对象类型</typeparam>
            <param name="assemblyName">程序集名称</param>
            <param name="nameSpace">命名空间</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.VerifyNullableType(System.Type)">
            <summary>
            验证可空类型，获取基础类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.IsClass(System.Type)">
            <summary>
            是否自定义类
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.IsCustomClass(System.Type)">
            <summary>
            是否自定义类
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.IsCollection(System.Type)">
            <summary>
            是否集合类
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Reflection.ReflectHelper.GetValueByChangeType(System.String,System.Type)">
            <summary>
            转换数据类型，判断是否为空
            </summary>
            <param name="item">输入数据</param>
            <param name="type">目标类型</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Common.Utils.Serialize.JsonHelper">
            <summary>
            Json 辅助类#
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Serialize.JsonHelper.settingsSerialize">
            <summary>
            序列化 默认参数
            </summary>
        </member>
        <member name="F:Base.Util.Common.Utils.Serialize.JsonHelper.settingsDeserialize">
            <summary>
            反序列化 默认参数
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.Serialize.JsonHelper.SerializeObject(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Serialize.JsonHelper.SerializeObjectDefault(System.Object)">
            <summary>
            序列化(默认配置)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Serialize.JsonHelper.DeserializeObject``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonStr"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Serialize.JsonHelper.DeserializeObjectDefault``1(System.String)">
            <summary>
            反序列化(默认配置)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonStr"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Serialize.JsonHelper.ObjectToClass``1(System.Object)">
            <summary>
            序列化object 转换为指定类
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Serialize.JsonHelper.DeserializeJsonToObject``1(System.String)">
            <summary>
            解析JSON字符串生成对象实体
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">json字符串(eg.{"ID":"112","Name":"石子儿"})</param>
            <returns>对象实体</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Serialize.JsonHelper.DeserializeJsonToList``1(System.String)">
            <summary>
            解析JSON数组生成对象实体集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">json数组字符串(eg.[{"ID":"112","Name":"石子儿"}])</param>
            <returns>对象实体集合</returns>
        </member>
        <member name="M:Base.Util.Common.Utils.Serialize.JsonHelper.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            反序列化JSON到给定的匿名对象.
            </summary>
            <typeparam name="T">匿名对象类型</typeparam>
            <param name="json">json字符串</param>
            <param name="anonymousTypeObject">匿名对象</param>
            <returns>匿名对象</returns>
        </member>
        <member name="T:Base.Util.Common.Utils.VerifyHelper.VerificationHelper">
            <summary>
            正则验证库 辅助类
            </summary>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsNullOrEmpty(System.String)">
            <summary>
            验证 输入 字符串是否为空
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsMatch(System.String,System.String)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件</param>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.GetMatch(System.String,System.String)">
            <summary>
            获取验证信息
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsIP(System.String)">
            <summary>
            验证IP地址是否合法
            </summary>
            <param name="ip">要验证的IP地址</param>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsEmail(System.String)">
            <summary>
            验证EMail是否合法
            </summary>
            <param name="email">要验证的Email</param>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsInt(System.String)">
            <summary>
            验证是否为整数 如果为空，认为验证不合格 返回false
            </summary>
            <param name="number">要验证的整数</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsNumber(System.String)">
            <summary>
            验证是否为数字
            </summary>
            <param name="number">要验证的数字</param>        
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsValidDecimal(System.String)">
            <summary>
            验证是否是小数
            </summary>
            <param name="strIn"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsDecimal(System.String)">
            <summary>
            是否为数字型
            </summary>
            <param name="strNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsDate(System.String)">
            <summary>
            是否为日期型字符串
            </summary>
            <param name="StrSource">日期字符串(2008-05-08)</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsTime(System.String)">
            <summary>
            是否为时间型字符串
            </summary>
            <param name="StrSource">时间字符串(15:00:00)</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsDateTime(System.String)">
            <summary>
            是否为日期+时间型字符串
            </summary>
            <param name="StrSource"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsIDCard(System.String)">
            <summary>
            验证身份证是否有效
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.HasIDCardMatch(System.String)">
            <summary>
            获取正则验证结果（包含身份证）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsUrl(System.String)">
            <summary>
            验证网址
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsMobile(System.String)">
            <summary>
            验证手机号
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.HasMobileMatch(System.String)">
            <summary>
            获取正则验证结果（包含手机号）
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsTel(System.String)">
            <summary>
            是不是中国电话，格式010-85849685
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsLengthStr(System.String,System.Int32,System.Int32)">
            <summary>
            看字符串的长度是不是在限定数之间 一个中文为两个字符
            </summary>
            <param name="source">字符串</param>
            <param name="begin">大于等于</param>
            <param name="end">小于等于</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsPostCode(System.String)">
            <summary>
            邮政编码 6个数字
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsChinese(System.String)">
            <summary>
            中文
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.IsNormalChar(System.String)">
            <summary>
            验证是不是正常字符 字母，数字，下划线的组合
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Common.Utils.VerifyHelper.VerificationHelper.CheckUser(System.String)">
            <summary>
            验证用户名：必须以字母开头，可以包含字母、数字、“_”、“.”，至少5个字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Weaversys.Util.Common.Utils.Serialize.SerializeHelper">
            <summary>
            Json
            </summary>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.Save(System.Object,System.String)">
            <summary>
            文件化XML序列化
            </summary>
            <param name="obj">对象</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.Load(System.Type,System.String)">
            <summary>
            文件化XML反序列化
            </summary>
            <param name="type">对象类型</param>
            <param name="filename">文件路径</param>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ToXml``1(``0)">
            <summary>
            文本化XML序列化
            </summary>
            <param name="item">对象</param>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.FromXml``1(System.String)">
            <summary>
            文本化XML反序列化
            </summary>
            <param name="str">字符串序列</param>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.XmlDeserailize``1(System.String)">
            <summary>
            从xml序列中反序列化
            </summary>
            <param name="objname"></param>
            <returns></returns>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ToJson``1(``0)">
            <summary>
            JsonSerializer序列化
            </summary>
            <param name="item">对象</param>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ToBinary``1(``0)">
            <summary>
            BinaryFormatter序列化
            </summary>
            <param name="item">对象</param>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.FromBinary``1(System.String)">
            <summary>
            BinaryFormatter反序列化
            </summary>
            <param name="str">字符串序列</param>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.BinarySerialize(System.String,System.Object)">
            <summary>
            序列化为对象
            </summary>
            <param name="objname"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.BinaryDeserialize(System.String)">
            <summary>
            从二进制文件中反序列化
            </summary>
            <param name="objname"></param>
            <returns></returns>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.String2Json(System.String)">
            <summary>
            过滤特殊字符
            </summary>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.StringFormat(System.String,System.Type)">
            <summary>
            格式化字符型、日期型、布尔型
            </summary>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ListToJson``1(System.Collections.Generic.IList{``0})">
            <summary>
            List转换成Json
            </summary>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            List转换成Json 
            </summary>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ToJson(System.Object)">
            <summary> 
            对象转换为Json 
            </summary> 
            <param name="jsonObject">对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ToJson(System.Collections.IEnumerable)">
            <summary> 
            对象集合转换Json 
            </summary> 
            <param name="array">集合对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ToArrayString(System.Collections.IEnumerable)">
            <summary> 
            普通集合转换Json 
            </summary> 
            <param name="array">集合对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ToJson(System.Data.DataSet)">
            <summary> 
            DataSet转换为Json 
            </summary> 
            <param name="dataSet">DataSet对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ToJson(System.Data.DataTable)">
            <summary> 
            Datatable转换为Json 
            </summary> 
            <param name="dt">Datatable对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ToJson(System.Data.DataTable,System.String)">
            <summary>
            DataTable转换为Json 
            </summary>
        </member>
        <member name="M:Weaversys.Util.Common.Utils.Serialize.SerializeHelper.ToJson(System.Data.Common.DbDataReader)">
            <summary> 
            DataReader转换为Json 
            </summary> 
            <param name="dataReader">DataReader对象</param> 
            <returns>Json字符串</returns> 
        </member>
    </members>
</doc>
