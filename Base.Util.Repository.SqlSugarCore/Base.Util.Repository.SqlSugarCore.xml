<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Base.Util.Repository.SqlSugarCore</name>
    </assembly>
    <members>
        <member name="T:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1">
            <summary>
            基类服务接口
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            基类服务接口
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            基类服务接口
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            基类服务接口
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            基类服务接口
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            基类服务接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Select(System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            映射
            </summary>
            <param name="selectExpression">映射表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            排序
            </summary>
            <param name="orderByExpression">排序表达式</param>
            <param name="isDesc">是否是倒序</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Insert(`0[])">
            <summary>
            新增数据
            </summary>
            <param name="model">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.InsertAsync(`0[])">
            <summary>
            新增数据（异步）
            </summary>
            <param name="model">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增数据
            </summary>
            <param name="model">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.InsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增数据（异步）
            </summary>
            <param name="model">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Update(`0[])">
            <summary>
            修改数据
            </summary>
            <param name="model">实体数组</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.UpdateAsync(`0[])">
            <summary>
            修改数据（异步）
            </summary>
            <param name="model">实体数组</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改数据
            </summary>
            <param name="model">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改数据（异步）
            </summary>
            <param name="model">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.LogicDelete(`0[])">
            <summary>
            逻辑删除数据
            </summary>
            <param name="model">实体数组</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.LogicDeleteAsync(`0[])">
            <summary>
            逻辑删除数据（异步）
            </summary>
            <param name="model">实体数组</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.LogicDelete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            逻辑删除数据
            </summary>
            <param name="model">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.LogicDeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            逻辑删除数据（异步）
            </summary>
            <param name="model">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Delete(`0[])">
            <summary>
            物理删除数据
            </summary>
            <param name="model">实体数组</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.DeleteAsync(`0[])">
            <summary>
            物理删除数据（异步）
            </summary>
            <param name="model">实体数组</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            物理删除数据
            </summary>
            <param name="model">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.DeleteAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            物理删除数据（异步）
            </summary>
            <param name="model">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            检查是否存在实体
            </summary>
            <param name="expression">查询表达式</param>
            <returns>true 存在  false 不存在</returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Find(System.Object)">
            <summary>
            查找数据
            </summary>
            <param name="key">主键</param>
            <returns>逻辑删除数据 返回 null</returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Find(System.Object,System.Boolean)">
            <summary>
            查找数据
            </summary>
            <param name="key">主键</param>
            <param name="logicDeleteJudge">是否需要逻辑删除判断</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FindAsync(System.Object)">
            <summary>
            查找数据（异步）
            </summary>
            <param name="key">主键</param>
            <returns>逻辑删除数据 返回 null</returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FindAsync(System.Object,System.Boolean)">
            <summary>
            查找数据（异步）
            </summary>
            <param name="key">主键</param>
            <param name="logicDeleteJudge">是否需要逻辑删除判断</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query">
            <summary>
            获取数据集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Int32,System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList">
            <summary>
            获取数据集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Int32,System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Count">
            <summary>
            Count 统计行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.CountAsync">
            <summary>
            Count 统计行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Count 统计行
            </summary>
            <param name="expression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Count 统计行
            </summary>
            <param name="expression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.CountInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Count 统计行
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.CountIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Count 统计行
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.CountInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            Count 统计行
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.CountIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            Count 统计行
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Max``1(System.String)">
            <summary>
            Max 取最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="maxField">MAX 计算字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.MaxAsync``1(System.String)">
            <summary>
            Max 取最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="maxField">MAX 计算字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Max``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Max 取最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="maxField">MAX 计算字段</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.MaxAsync``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Max 取最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="maxField">MAX 计算字段</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Max 取最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">MAX 计算字段表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Max 取最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">MAX 计算字段表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Max 取最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">MAX 计算字段表达式</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Max 取最大值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">MAX 计算字段表达式</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Min``1(System.String)">
            <summary>
            Min 取最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="minField">Min 计算字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.MinAsync``1(System.String)">
            <summary>
            Min 取最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="minField">Min 计算字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Min``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Min 取最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="minField">Min 计算字段</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.MinAsync``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Min 取最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="minField">Min 计算字段</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Min 取最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Min 计算字段表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Min 取最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Min 计算字段表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Min 取最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Min 计算字段表达式</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Min 取最小值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Min 计算字段表达式</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Sum``1(System.String)">
            <summary>
            Sum 取求和
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sumField">Sum 计算字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.SumAsync``1(System.String)">
            <summary>
            Sum 取求和
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sumField">Sum 计算字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Sum``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Sum 取求和
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sumField">Sum 计算字段</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.SumAsync``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Sum 取求和
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="sumField">Sum 计算字段</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sum 取求和
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Sum 计算字段表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sum 取求和
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Sum 计算字段表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Sum 取求和
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Sum 计算字段表达式</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Sum 取求和
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Sum 计算字段表达式</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Avg``1(System.String)">
            <Avgmary>
            Avg 取平均
            </Avgmary>
            <typeparam name="TResult"></typeparam>
            <param name="avgField">Avg 计算字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.AvgAsync``1(System.String)">
            <Avgmary>
            Avg 取平均
            </Avgmary>
            <typeparam name="TResult"></typeparam>
            <param name="avgField">Avg 计算字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Avg``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <Avgmary>
            Avg 取平均
            </Avgmary>
            <typeparam name="TResult"></typeparam>
            <param name="avgField">Avg 计算字段</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.AvgAsync``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <Avgmary>
            Avg 取平均
            </Avgmary>
            <typeparam name="TResult"></typeparam>
            <param name="avgField">Avg 计算字段</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Avg``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <Avgmary>
            Avg 取平均
            </Avgmary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Avg 计算字段表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.AvgAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <Avgmary>
            Avg 取平均
            </Avgmary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Avg 计算字段表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Avg``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <Avgmary>
            Avg 取平均
            </Avgmary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Avg 计算字段表达式</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.AvgAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <Avgmary>
            Avg 取平均
            </Avgmary>
            <typeparam name="TResult"></typeparam>
            <param name="expression">Avg 计算字段表达式</param>
            <param name="whereExpression">查询表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.GroupByPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Int32,System.Int32,System.Boolean)">
            <summary>
            分组 分页方法
            </summary>
            <param name="whereExpression"></param>
            <param name="groupByExpression"></param>
            <param name="havingExpression"></param>
            <param name="orderByExpression"></param>
            <param name="selectExpression"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.GroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Boolean)">
            <summary>
            分组 分页方法
            </summary>
            <param name="whereExpression"></param>
            <param name="groupByExpression"></param>
            <param name="havingExpression"></param>
            <param name="orderByExpression"></param>
            <param name="selectExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            下一次查询需要关联查询的属性
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="include"></param>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            下一次查询需要关联查询的属性
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="include"></param>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Include``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            下一次查询需要关联查询的属性（二级）
            </summary>
            <typeparam name="TProperty1"></typeparam>
            <typeparam name="TProperty2"></typeparam>
            <param name="include1"></param>
            <param name="include2"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Include``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.List{``1}}})">
            <summary>
            下一次查询需要关联查询的属性（二级）
            </summary>
            <typeparam name="TProperty1"></typeparam>
            <typeparam name="TProperty2"></typeparam>
            <param name="include1"></param>
            <param name="include2"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Include``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            下一次查询需要关联查询的属性（二级）
            </summary>
            <typeparam name="TProperty1"></typeparam>
            <typeparam name="TProperty2"></typeparam>
            <param name="include1"></param>
            <param name="include2"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Include``2(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.List{``1}}})">
            <summary>
            下一次查询需要关联查询的属性（二级）
            </summary>
            <typeparam name="TProperty1"></typeparam>
            <typeparam name="TProperty2"></typeparam>
            <param name="include1"></param>
            <param name="include2"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.Include``3(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.List{``1}}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.List{``2}}})">
            <summary>
            下一次查询需要关联查询的属性（三级）
            </summary>
            <typeparam name="TProperty1"></typeparam>
            <typeparam name="TProperty2"></typeparam>
            <typeparam name="TProperty3"></typeparam>
            <param name="include1"></param>
            <param name="include2"></param>
            <param name="include3"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultInclude``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查找数据
            </summary>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            查找数据
            </summary>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            查找数据
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.FirstOrDefaultIncludeAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            查找数据（异步）
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.QueryPageListInclude``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据集合
            </summary>
            <param name="expression">查询表达式</param>
            <param name="orderByField">排序字段</param>
            <param name="isDesc">是否是倒叙</param>
            <param name="thenByFields">再排序字段,倒叙true 正序false</param>
            <param name="pageIndex">分页数</param>
            <param name="pageSize">分页大小</param>
            <param name="include">包含关联表表达式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.InnerJoin``1(System.Linq.Expressions.Expression{System.Func{`0,``0,System.Boolean}})">
            <summary>
            下一次 inner 联表查询
            </summary>
            <typeparam name="TEntity2"></typeparam>
            <param name="joinExpression"></param>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.InnerJoin``2(System.Linq.Expressions.Expression{System.Func{`0,``0,``1,System.Boolean}})">
            <summary>
            下一次 inner 联表查询
            </summary>
            <typeparam name="TEntity2"></typeparam>
            <typeparam name="TEntity3"></typeparam>
            <param name="joinExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.StoreProcedure``1(Base.Util.Repository.SqlSugarCore.Models.StoredProcedureDto)">
            <summary>
            执行存储过程
            </summary>
            <param name="procedure">存储过程信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.StoreProcedureAsync``1(Base.Util.Repository.SqlSugarCore.Models.StoredProcedureDto)">
            <summary>
            执行存储过程（异步）
            </summary>
            <param name="procedure">存储过程信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.BeginTransaction">
            <summary>
            开启事务
            </summary>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.CommitTransaction">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Abstraction.IBaseRepository`1.RollbackTransaction">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="T:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1">
            <summary>
            基类服务
            </summary>
            <typeparam name="TEntity"></typeparam>
            <summary>
            基类服务 -- 函数相关
            </summary>
            <summary>
            基类服务 -- 分组相关
            </summary>
            <summary>
            基类服务 -- 联表相关
            </summary>
            <summary>
            基类服务 -- 联表相关
            </summary>
            <summary>
            基类服务 -- 联表相关
            </summary>
        </member>
        <member name="P:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1._baseContext">
             <summary>
            通过在子类的构造函数中注入，这里是基类，不用构造函数
             </summary>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.GetQueryable">
            <summary>
            获取查询数据源
            </summary>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.GetQueryableEntities(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            获取查询集合
            </summary>
            <param name="expression"></param>
            <param name="orderByField"></param>
            <param name="isDesc"></param>
            <param name="thenByFields"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.GetQueryEntities(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取数据源集合（过滤）
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.GetOrderFiledString(System.String,System.Boolean)">
            <summary>
            获取排序字段
            </summary>
            <param name="orderByField">排序字段</param>
            <param name="isDesc"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.GetQueryableEntities``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取查询集合（涉包含）
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="expression"></param>
            <param name="orderByField"></param>
            <param name="isDesc"></param>
            <param name="thenByFields"></param>
            <param name="include"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.GetQueryableEntities``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取查询集合（涉包含）
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="expression"></param>
            <param name="orderByField"></param>
            <param name="isDesc"></param>
            <param name="thenByFields"></param>
            <param name="include"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.GetQueryEntities``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            获取数据源集合（过滤）
            </summary>
            <param name="expression"></param>
            <param name="include"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.GetQueryEntities``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.List{``0}}})">
            <summary>
            获取数据源集合（过滤）
            </summary>
            <param name="expression"></param>
            <param name="include"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.IsDmDataBase">
            <summary>
            判断是否是达梦数据库
            </summary>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Implementation.BaseRepository`1.DataTableToList``1(System.Data.DataTable)">
            <summary>
            DataTable所有数据转换成实体类列表
            </summary>
            <typeparam name="T">实体类</typeparam>
            <param name="dt">DataTable</param>
            <returns>返回实体类列表</returns>
        </member>
        <member name="T:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureDto">
            <summary>
            存储过程类
            </summary>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureDto.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureDto.ProcedureName">
            <summary>
            存储过程名称
            </summary>
        </member>
        <member name="P:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureDto.Parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureDto.AddParameter(System.String,System.Object)">
            <summary>
            添加参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureDto.AddOutputParameter(System.String,System.Object)">
            <summary>
            添加输出参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureDto.AddIntputOutputParameter(System.String,System.Object)">
            <summary>
            添加输入输出参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureDto.Create(System.String)">
            <summary>
            创建实例
            </summary>
            <param name="name">存储过程名称</param>
            <returns></returns>
        </member>
        <member name="T:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureParameter">
            <summary>
            存储过程参数
            </summary>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureParameter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureParameter.ParameterName">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureParameter.Direction">
            <summary>
            参数方向
            </summary>
        </member>
        <member name="P:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureParameter.IsOutput">
            <summary>
            是否是输出参数
            </summary>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureParameter.CreateInput(System.String,System.Object)">
            <summary>
            创建参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureParameter.CreateOutput(System.String,System.Object)">
            <summary>
            创建输出参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Util.Repository.SqlSugarCore.Models.StoredProcedureParameter.CreateInputOutput(System.String,System.Object)">
            <summary>
            创建输出参数
            </summary>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
    </members>
</doc>
